{
  "0xd89958c02c4c9915f6877ddd4edebf9dfcceb090ce1f54446bb91aea296e78a7": {
    "name": "DiamondLoupeFacet",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "DiamondLoupeFacet",
      "sourceName": "contracts/facets/diamond/DiamondCutLoupe.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "_functionSelector",
              "type": "bytes4"
            }
          ],
          "name": "facetAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "facetAddress_",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "facetAddresses",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "facetAddresses_",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_facet",
              "type": "address"
            }
          ],
          "name": "facetFunctionSelectors",
          "outputs": [
            {
              "internalType": "bytes4[]",
              "name": "facetFunctionSelectors_",
              "type": "bytes4[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "facets",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "facetAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "functionSelectors",
                  "type": "bytes4[]"
                }
              ],
              "internalType": "struct IDiamondLoupe.Facet[]",
              "name": "facets_",
              "type": "tuple[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "_interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x6080604052348015600f57600080fd5b506106c58061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100e2578063adfca15e146100f7578063cdffacc61461011757600080fd5b806301ffc9a71461006c57806352ef6b2c146100cd575b600080fd5b6100b861007a3660046104df565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100d5610181565b6040516100c49190610510565b6100ea610206565b6040516100c491906105a2565b61010a610105366004610627565b6103ec565b6040516100c49190610650565b6101696101253660046104df565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c60205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016100c4565b606060007fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600281018054604080516020808402820181019092528281529394508301828280156101fb57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101dd575b505050505091505090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e546060907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c908067ffffffffffffffff81111561026657610266610663565b6040519080825280602002602001820160405280156102ac57816020015b6040805180820190915260008152606060208201528152602001906001900390816102845790505b50925060005b818110156103e65760008360020182815481106102d1576102d1610679565b9060005260206000200160009054906101000a90046001600160a01b031690508085838151811061030457610304610679565b6020908102919091018101516001600160a01b0392831690529082166000908152600186018252604090819020805482518185028101850190935280835291929091908301828280156103b857602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103655790505b50505050508583815181106103cf576103cf610679565b6020908102919091018101510152506001016102b2565b50505090565b6001600160a01b03811660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602090815260409182902080548351818402810184019094528084526060937fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c93909291908301828280156104d257602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161047f5790505b5050505050915050919050565b6000602082840312156104f157600080fd5b81356001600160e01b03198116811461050957600080fd5b9392505050565b602080825282518282018190526000918401906040840190835b818110156105515783516001600160a01b031683526020938401939092019160010161052a565b509095945050505050565b600081518084526020840193506020830160005b828110156105985781516001600160e01b031916865260209586019590910190600101610570565b5093949350505050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561061b57603f1987860301845281516001600160a01b0381511686526020810151905060406020870152610605604087018261055c565b95505060209384019391909101906001016105ca565b50929695505050505050565b60006020828403121561063957600080fd5b81356001600160a01b038116811461050957600080fd5b602081526000610509602083018461055c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220f82f9e1a73e9631c8d834aa655d2f272772fe02f8afad9490d0828e23bec05a164736f6c634300081b0033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100e2578063adfca15e146100f7578063cdffacc61461011757600080fd5b806301ffc9a71461006c57806352ef6b2c146100cd575b600080fd5b6100b861007a3660046104df565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100d5610181565b6040516100c49190610510565b6100ea610206565b6040516100c491906105a2565b61010a610105366004610627565b6103ec565b6040516100c49190610650565b6101696101253660046104df565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c60205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016100c4565b606060007fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600281018054604080516020808402820181019092528281529394508301828280156101fb57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101dd575b505050505091505090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e546060907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c908067ffffffffffffffff81111561026657610266610663565b6040519080825280602002602001820160405280156102ac57816020015b6040805180820190915260008152606060208201528152602001906001900390816102845790505b50925060005b818110156103e65760008360020182815481106102d1576102d1610679565b9060005260206000200160009054906101000a90046001600160a01b031690508085838151811061030457610304610679565b6020908102919091018101516001600160a01b0392831690529082166000908152600186018252604090819020805482518185028101850190935280835291929091908301828280156103b857602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103655790505b50505050508583815181106103cf576103cf610679565b6020908102919091018101510152506001016102b2565b50505090565b6001600160a01b03811660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602090815260409182902080548351818402810184019094528084526060937fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c93909291908301828280156104d257602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161047f5790505b5050505050915050919050565b6000602082840312156104f157600080fd5b81356001600160e01b03198116811461050957600080fd5b9392505050565b602080825282518282018190526000918401906040840190835b818110156105515783516001600160a01b031683526020938401939092019160010161052a565b509095945050505050565b600081518084526020840193506020830160005b828110156105985781516001600160e01b031916865260209586019590910190600101610570565b5093949350505050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561061b57603f1987860301845281516001600160a01b0381511686526020810151905060406020870152610605604087018261055c565b95505060209384019391909101906001016105ca565b50929695505050505050565b60006020828403121561063957600080fd5b81356001600160a01b038116811461050957600080fd5b602081526000610509602083018461055c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220f82f9e1a73e9631c8d834aa655d2f272772fe02f8afad9490d0828e23bec05a164736f6c634300081b0033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "facetAddress(bytes4)": {
            "details": "If facet is not found return address(0).",
            "params": {
              "_functionSelector": "The function selector."
            },
            "returns": {
              "facetAddress_": "The facet address."
            }
          },
          "facetAddresses()": {
            "returns": {
              "facetAddresses_": "facetAddresses_"
            }
          },
          "facetFunctionSelectors(address)": {
            "params": {
              "_facet": "The facet address."
            },
            "returns": {
              "facetFunctionSelectors_": "facetFunctionSelectors_"
            }
          },
          "facets()": {
            "returns": {
              "facets_": "Facet"
            }
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {},
          "generatedSources": [],
          "linkReferences": {},
          "object": "6080604052348015600f57600080fd5b506106c58061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100e2578063adfca15e146100f7578063cdffacc61461011757600080fd5b806301ffc9a71461006c57806352ef6b2c146100cd575b600080fd5b6100b861007a3660046104df565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100d5610181565b6040516100c49190610510565b6100ea610206565b6040516100c491906105a2565b61010a610105366004610627565b6103ec565b6040516100c49190610650565b6101696101253660046104df565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c60205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016100c4565b606060007fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600281018054604080516020808402820181019092528281529394508301828280156101fb57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101dd575b505050505091505090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e546060907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c908067ffffffffffffffff81111561026657610266610663565b6040519080825280602002602001820160405280156102ac57816020015b6040805180820190915260008152606060208201528152602001906001900390816102845790505b50925060005b818110156103e65760008360020182815481106102d1576102d1610679565b9060005260206000200160009054906101000a90046001600160a01b031690508085838151811061030457610304610679565b6020908102919091018101516001600160a01b0392831690529082166000908152600186018252604090819020805482518185028101850190935280835291929091908301828280156103b857602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103655790505b50505050508583815181106103cf576103cf610679565b6020908102919091018101510152506001016102b2565b50505090565b6001600160a01b03811660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602090815260409182902080548351818402810184019094528084526060937fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c93909291908301828280156104d257602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161047f5790505b5050505050915050919050565b6000602082840312156104f157600080fd5b81356001600160e01b03198116811461050957600080fd5b9392505050565b602080825282518282018190526000918401906040840190835b818110156105515783516001600160a01b031683526020938401939092019160010161052a565b509095945050505050565b600081518084526020840193506020830160005b828110156105985781516001600160e01b031916865260209586019590910190600101610570565b5093949350505050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561061b57603f1987860301845281516001600160a01b0381511686526020810151905060406020870152610605604087018261055c565b95505060209384019391909101906001016105ca565b50929695505050505050565b60006020828403121561063957600080fd5b81356001600160a01b038116811461050957600080fd5b602081526000610509602083018461055c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220f82f9e1a73e9631c8d834aa655d2f272772fe02f8afad9490d0828e23bec05a164736f6c634300081b0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6C5 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A0ED627 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x7A0ED627 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0xADFCA15E EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0xCDFFACC6 EQ PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x52EF6B2C EQ PUSH2 0xCD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB8 PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD5 PUSH2 0x181 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC4 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0xEA PUSH2 0x206 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC4 SWAP2 SWAP1 PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x10A PUSH2 0x105 CALLDATASIZE PUSH1 0x4 PUSH2 0x627 JUMP JUMPDEST PUSH2 0x3EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC4 SWAP2 SWAP1 PUSH2 0x650 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC4 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1DD JUMPI JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131E SLOAD PUSH1 0x60 SWAP1 PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x266 JUMPI PUSH2 0x266 PUSH2 0x663 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2AC JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x284 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP4 PUSH1 0x2 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2D1 JUMPI PUSH2 0x2D1 PUSH2 0x679 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x304 JUMPI PUSH2 0x304 PUSH2 0x679 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP1 MSTORE SWAP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP7 ADD DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x365 JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3CF JUMPI PUSH2 0x3CF PUSH2 0x679 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x2B2 JUMP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x47F JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x551 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x52A JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x598 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x570 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH1 0x20 DUP4 MSTORE DUP1 DUP5 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP6 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP7 ADD ADD SWAP3 POP PUSH1 0x20 DUP7 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x61B JUMPI PUSH1 0x3F NOT DUP8 DUP7 SUB ADD DUP5 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND DUP7 MSTORE PUSH1 0x20 DUP2 ADD MLOAD SWAP1 POP PUSH1 0x40 PUSH1 0x20 DUP8 ADD MSTORE PUSH2 0x605 PUSH1 0x40 DUP8 ADD DUP3 PUSH2 0x55C JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5CA JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x509 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x55C JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 0x2F SWAP15 BYTE PUSH20 0xE9631C8D834AA655D2F272772FE02F8AFAD9490D ADDMOD 0x28 0xE2 EXTCODESIZE 0xEC SDIV LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
          "sourceMap": "698:2484:44:-:0;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@diamondStorage_14335": {
              "entryPoint": null,
              "id": 14335,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@facetAddress_12355": {
              "entryPoint": null,
              "id": 12355,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@facetAddresses_12328": {
              "entryPoint": 385,
              "id": 12328,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@facetFunctionSelectors_12305": {
              "entryPoint": 1004,
              "id": 12305,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@facets_12277": {
              "entryPoint": 518,
              "id": 12277,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@supportsInterface_12378": {
              "entryPoint": null,
              "id": 12378,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 1575,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 1247,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_array_bytes4_dyn": {
              "entryPoint": 1372,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 1296,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_bytes4_$dyn_memory_ptr__to_t_array$_t_bytes4_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 1616,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_struct$_Facet_$13955_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Facet_$13955_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 1442,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x32": {
              "entryPoint": 1657,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 1635,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:3935:62",
                "nodeType": "YulBlock",
                "src": "0:3935:62",
                "statements": [
                  {
                    "nativeSrc": "6:3:62",
                    "nodeType": "YulBlock",
                    "src": "6:3:62",
                    "statements": []
                  },
                  {
                    "body": {
                      "nativeSrc": "83:263:62",
                      "nodeType": "YulBlock",
                      "src": "83:263:62",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "129:16:62",
                            "nodeType": "YulBlock",
                            "src": "129:16:62",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "138:1:62",
                                      "nodeType": "YulLiteral",
                                      "src": "138:1:62",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "141:1:62",
                                      "nodeType": "YulLiteral",
                                      "src": "141:1:62",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "131:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "131:6:62"
                                  },
                                  "nativeSrc": "131:12:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "131:12:62"
                                },
                                "nativeSrc": "131:12:62",
                                "nodeType": "YulExpressionStatement",
                                "src": "131:12:62"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "104:7:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "104:7:62"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "113:9:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "113:9:62"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "100:3:62",
                                  "nodeType": "YulIdentifier",
                                  "src": "100:3:62"
                                },
                                "nativeSrc": "100:23:62",
                                "nodeType": "YulFunctionCall",
                                "src": "100:23:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "125:2:62",
                                "nodeType": "YulLiteral",
                                "src": "125:2:62",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "96:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "96:3:62"
                            },
                            "nativeSrc": "96:32:62",
                            "nodeType": "YulFunctionCall",
                            "src": "96:32:62"
                          },
                          "nativeSrc": "93:52:62",
                          "nodeType": "YulIf",
                          "src": "93:52:62"
                        },
                        {
                          "nativeSrc": "154:36:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "154:36:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "180:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "180:9:62"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "167:12:62",
                              "nodeType": "YulIdentifier",
                              "src": "167:12:62"
                            },
                            "nativeSrc": "167:23:62",
                            "nodeType": "YulFunctionCall",
                            "src": "167:23:62"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nativeSrc": "158:5:62",
                              "nodeType": "YulTypedName",
                              "src": "158:5:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "300:16:62",
                            "nodeType": "YulBlock",
                            "src": "300:16:62",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "309:1:62",
                                      "nodeType": "YulLiteral",
                                      "src": "309:1:62",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "312:1:62",
                                      "nodeType": "YulLiteral",
                                      "src": "312:1:62",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "302:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "302:6:62"
                                  },
                                  "nativeSrc": "302:12:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "302:12:62"
                                },
                                "nativeSrc": "302:12:62",
                                "nodeType": "YulExpressionStatement",
                                "src": "302:12:62"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "212:5:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "212:5:62"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "223:5:62",
                                        "nodeType": "YulIdentifier",
                                        "src": "223:5:62"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "230:66:62",
                                        "nodeType": "YulLiteral",
                                        "src": "230:66:62",
                                        "type": "",
                                        "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "219:3:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "219:3:62"
                                    },
                                    "nativeSrc": "219:78:62",
                                    "nodeType": "YulFunctionCall",
                                    "src": "219:78:62"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "209:2:62",
                                  "nodeType": "YulIdentifier",
                                  "src": "209:2:62"
                                },
                                "nativeSrc": "209:89:62",
                                "nodeType": "YulFunctionCall",
                                "src": "209:89:62"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "202:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "202:6:62"
                            },
                            "nativeSrc": "202:97:62",
                            "nodeType": "YulFunctionCall",
                            "src": "202:97:62"
                          },
                          "nativeSrc": "199:117:62",
                          "nodeType": "YulIf",
                          "src": "199:117:62"
                        },
                        {
                          "nativeSrc": "325:15:62",
                          "nodeType": "YulAssignment",
                          "src": "325:15:62",
                          "value": {
                            "name": "value",
                            "nativeSrc": "335:5:62",
                            "nodeType": "YulIdentifier",
                            "src": "335:5:62"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "325:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "325:6:62"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nativeSrc": "14:332:62",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "49:9:62",
                        "nodeType": "YulTypedName",
                        "src": "49:9:62",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "60:7:62",
                        "nodeType": "YulTypedName",
                        "src": "60:7:62",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "72:6:62",
                        "nodeType": "YulTypedName",
                        "src": "72:6:62",
                        "type": ""
                      }
                    ],
                    "src": "14:332:62"
                  },
                  {
                    "body": {
                      "nativeSrc": "446:92:62",
                      "nodeType": "YulBlock",
                      "src": "446:92:62",
                      "statements": [
                        {
                          "nativeSrc": "456:26:62",
                          "nodeType": "YulAssignment",
                          "src": "456:26:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "468:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "468:9:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "479:2:62",
                                "nodeType": "YulLiteral",
                                "src": "479:2:62",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "464:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "464:3:62"
                            },
                            "nativeSrc": "464:18:62",
                            "nodeType": "YulFunctionCall",
                            "src": "464:18:62"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "456:4:62",
                              "nodeType": "YulIdentifier",
                              "src": "456:4:62"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "498:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "498:9:62"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "523:6:62",
                                        "nodeType": "YulIdentifier",
                                        "src": "523:6:62"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "516:6:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "516:6:62"
                                    },
                                    "nativeSrc": "516:14:62",
                                    "nodeType": "YulFunctionCall",
                                    "src": "516:14:62"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "509:6:62",
                                  "nodeType": "YulIdentifier",
                                  "src": "509:6:62"
                                },
                                "nativeSrc": "509:22:62",
                                "nodeType": "YulFunctionCall",
                                "src": "509:22:62"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "491:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "491:6:62"
                            },
                            "nativeSrc": "491:41:62",
                            "nodeType": "YulFunctionCall",
                            "src": "491:41:62"
                          },
                          "nativeSrc": "491:41:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "491:41:62"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nativeSrc": "351:187:62",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "415:9:62",
                        "nodeType": "YulTypedName",
                        "src": "415:9:62",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "426:6:62",
                        "nodeType": "YulTypedName",
                        "src": "426:6:62",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "437:4:62",
                        "nodeType": "YulTypedName",
                        "src": "437:4:62",
                        "type": ""
                      }
                    ],
                    "src": "351:187:62"
                  },
                  {
                    "body": {
                      "nativeSrc": "694:509:62",
                      "nodeType": "YulBlock",
                      "src": "694:509:62",
                      "statements": [
                        {
                          "nativeSrc": "704:32:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "704:32:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "722:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "722:9:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "733:2:62",
                                "nodeType": "YulLiteral",
                                "src": "733:2:62",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "718:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "718:3:62"
                            },
                            "nativeSrc": "718:18:62",
                            "nodeType": "YulFunctionCall",
                            "src": "718:18:62"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nativeSrc": "708:6:62",
                              "nodeType": "YulTypedName",
                              "src": "708:6:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "752:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "752:9:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "763:2:62",
                                "nodeType": "YulLiteral",
                                "src": "763:2:62",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "745:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "745:6:62"
                            },
                            "nativeSrc": "745:21:62",
                            "nodeType": "YulFunctionCall",
                            "src": "745:21:62"
                          },
                          "nativeSrc": "745:21:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "745:21:62"
                        },
                        {
                          "nativeSrc": "775:17:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "775:17:62",
                          "value": {
                            "name": "tail_1",
                            "nativeSrc": "786:6:62",
                            "nodeType": "YulIdentifier",
                            "src": "786:6:62"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nativeSrc": "779:3:62",
                              "nodeType": "YulTypedName",
                              "src": "779:3:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "801:27:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "801:27:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "821:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "821:6:62"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "815:5:62",
                              "nodeType": "YulIdentifier",
                              "src": "815:5:62"
                            },
                            "nativeSrc": "815:13:62",
                            "nodeType": "YulFunctionCall",
                            "src": "815:13:62"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "805:6:62",
                              "nodeType": "YulTypedName",
                              "src": "805:6:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nativeSrc": "844:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "844:6:62"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "852:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "852:6:62"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "837:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "837:6:62"
                            },
                            "nativeSrc": "837:22:62",
                            "nodeType": "YulFunctionCall",
                            "src": "837:22:62"
                          },
                          "nativeSrc": "837:22:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "837:22:62"
                        },
                        {
                          "nativeSrc": "868:25:62",
                          "nodeType": "YulAssignment",
                          "src": "868:25:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "879:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "879:9:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "890:2:62",
                                "nodeType": "YulLiteral",
                                "src": "890:2:62",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "875:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "875:3:62"
                            },
                            "nativeSrc": "875:18:62",
                            "nodeType": "YulFunctionCall",
                            "src": "875:18:62"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "868:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "868:3:62"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "902:29:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "902:29:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "920:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "920:6:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "928:2:62",
                                "nodeType": "YulLiteral",
                                "src": "928:2:62",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "916:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "916:3:62"
                            },
                            "nativeSrc": "916:15:62",
                            "nodeType": "YulFunctionCall",
                            "src": "916:15:62"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nativeSrc": "906:6:62",
                              "nodeType": "YulTypedName",
                              "src": "906:6:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "940:10:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "940:10:62",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "949:1:62",
                            "nodeType": "YulLiteral",
                            "src": "949:1:62",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nativeSrc": "944:1:62",
                              "nodeType": "YulTypedName",
                              "src": "944:1:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1008:169:62",
                            "nodeType": "YulBlock",
                            "src": "1008:169:62",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nativeSrc": "1029:3:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "1029:3:62"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "srcPtr",
                                              "nativeSrc": "1044:6:62",
                                              "nodeType": "YulIdentifier",
                                              "src": "1044:6:62"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nativeSrc": "1038:5:62",
                                            "nodeType": "YulIdentifier",
                                            "src": "1038:5:62"
                                          },
                                          "nativeSrc": "1038:13:62",
                                          "nodeType": "YulFunctionCall",
                                          "src": "1038:13:62"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "1053:42:62",
                                          "nodeType": "YulLiteral",
                                          "src": "1053:42:62",
                                          "type": "",
                                          "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "1034:3:62",
                                        "nodeType": "YulIdentifier",
                                        "src": "1034:3:62"
                                      },
                                      "nativeSrc": "1034:62:62",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1034:62:62"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "1022:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1022:6:62"
                                  },
                                  "nativeSrc": "1022:75:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1022:75:62"
                                },
                                "nativeSrc": "1022:75:62",
                                "nodeType": "YulExpressionStatement",
                                "src": "1022:75:62"
                              },
                              {
                                "nativeSrc": "1110:19:62",
                                "nodeType": "YulAssignment",
                                "src": "1110:19:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nativeSrc": "1121:3:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "1121:3:62"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1126:2:62",
                                      "nodeType": "YulLiteral",
                                      "src": "1126:2:62",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "1117:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1117:3:62"
                                  },
                                  "nativeSrc": "1117:12:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1117:12:62"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "1110:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1110:3:62"
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "1142:25:62",
                                "nodeType": "YulAssignment",
                                "src": "1142:25:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nativeSrc": "1156:6:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "1156:6:62"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1164:2:62",
                                      "nodeType": "YulLiteral",
                                      "src": "1164:2:62",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "1152:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1152:3:62"
                                  },
                                  "nativeSrc": "1152:15:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1152:15:62"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nativeSrc": "1142:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1142:6:62"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nativeSrc": "970:1:62",
                                "nodeType": "YulIdentifier",
                                "src": "970:1:62"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "973:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "973:6:62"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "967:2:62",
                              "nodeType": "YulIdentifier",
                              "src": "967:2:62"
                            },
                            "nativeSrc": "967:13:62",
                            "nodeType": "YulFunctionCall",
                            "src": "967:13:62"
                          },
                          "nativeSrc": "959:218:62",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "981:18:62",
                            "nodeType": "YulBlock",
                            "src": "981:18:62",
                            "statements": [
                              {
                                "nativeSrc": "983:14:62",
                                "nodeType": "YulAssignment",
                                "src": "983:14:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "992:1:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "992:1:62"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "995:1:62",
                                      "nodeType": "YulLiteral",
                                      "src": "995:1:62",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "988:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "988:3:62"
                                  },
                                  "nativeSrc": "988:9:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "988:9:62"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "983:1:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "983:1:62"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "963:3:62",
                            "nodeType": "YulBlock",
                            "src": "963:3:62",
                            "statements": []
                          },
                          "src": "959:218:62"
                        },
                        {
                          "nativeSrc": "1186:11:62",
                          "nodeType": "YulAssignment",
                          "src": "1186:11:62",
                          "value": {
                            "name": "pos",
                            "nativeSrc": "1194:3:62",
                            "nodeType": "YulIdentifier",
                            "src": "1194:3:62"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1186:4:62",
                              "nodeType": "YulIdentifier",
                              "src": "1186:4:62"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
                    "nativeSrc": "543:660:62",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "663:9:62",
                        "nodeType": "YulTypedName",
                        "src": "663:9:62",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "674:6:62",
                        "nodeType": "YulTypedName",
                        "src": "674:6:62",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "685:4:62",
                        "nodeType": "YulTypedName",
                        "src": "685:4:62",
                        "type": ""
                      }
                    ],
                    "src": "543:660:62"
                  },
                  {
                    "body": {
                      "nativeSrc": "1268:432:62",
                      "nodeType": "YulBlock",
                      "src": "1268:432:62",
                      "statements": [
                        {
                          "nativeSrc": "1278:26:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1278:26:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "1298:5:62",
                                "nodeType": "YulIdentifier",
                                "src": "1298:5:62"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "1292:5:62",
                              "nodeType": "YulIdentifier",
                              "src": "1292:5:62"
                            },
                            "nativeSrc": "1292:12:62",
                            "nodeType": "YulFunctionCall",
                            "src": "1292:12:62"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "1282:6:62",
                              "nodeType": "YulTypedName",
                              "src": "1282:6:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "1320:3:62",
                                "nodeType": "YulIdentifier",
                                "src": "1320:3:62"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "1325:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "1325:6:62"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1313:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "1313:6:62"
                            },
                            "nativeSrc": "1313:19:62",
                            "nodeType": "YulFunctionCall",
                            "src": "1313:19:62"
                          },
                          "nativeSrc": "1313:19:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "1313:19:62"
                        },
                        {
                          "nativeSrc": "1341:21:62",
                          "nodeType": "YulAssignment",
                          "src": "1341:21:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "1352:3:62",
                                "nodeType": "YulIdentifier",
                                "src": "1352:3:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1357:4:62",
                                "nodeType": "YulLiteral",
                                "src": "1357:4:62",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1348:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "1348:3:62"
                            },
                            "nativeSrc": "1348:14:62",
                            "nodeType": "YulFunctionCall",
                            "src": "1348:14:62"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "1341:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "1341:3:62"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1371:30:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1371:30:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "1389:5:62",
                                "nodeType": "YulIdentifier",
                                "src": "1389:5:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1396:4:62",
                                "nodeType": "YulLiteral",
                                "src": "1396:4:62",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1385:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "1385:3:62"
                            },
                            "nativeSrc": "1385:16:62",
                            "nodeType": "YulFunctionCall",
                            "src": "1385:16:62"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nativeSrc": "1375:6:62",
                              "nodeType": "YulTypedName",
                              "src": "1375:6:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1410:10:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1410:10:62",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "1419:1:62",
                            "nodeType": "YulLiteral",
                            "src": "1419:1:62",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nativeSrc": "1414:1:62",
                              "nodeType": "YulTypedName",
                              "src": "1414:1:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1478:197:62",
                            "nodeType": "YulBlock",
                            "src": "1478:197:62",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nativeSrc": "1499:3:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "1499:3:62"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "srcPtr",
                                              "nativeSrc": "1514:6:62",
                                              "nodeType": "YulIdentifier",
                                              "src": "1514:6:62"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nativeSrc": "1508:5:62",
                                            "nodeType": "YulIdentifier",
                                            "src": "1508:5:62"
                                          },
                                          "nativeSrc": "1508:13:62",
                                          "nodeType": "YulFunctionCall",
                                          "src": "1508:13:62"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "1523:66:62",
                                          "nodeType": "YulLiteral",
                                          "src": "1523:66:62",
                                          "type": "",
                                          "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "1504:3:62",
                                        "nodeType": "YulIdentifier",
                                        "src": "1504:3:62"
                                      },
                                      "nativeSrc": "1504:86:62",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1504:86:62"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "1492:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1492:6:62"
                                  },
                                  "nativeSrc": "1492:99:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1492:99:62"
                                },
                                "nativeSrc": "1492:99:62",
                                "nodeType": "YulExpressionStatement",
                                "src": "1492:99:62"
                              },
                              {
                                "nativeSrc": "1604:21:62",
                                "nodeType": "YulAssignment",
                                "src": "1604:21:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nativeSrc": "1615:3:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "1615:3:62"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1620:4:62",
                                      "nodeType": "YulLiteral",
                                      "src": "1620:4:62",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "1611:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1611:3:62"
                                  },
                                  "nativeSrc": "1611:14:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1611:14:62"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "1604:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1604:3:62"
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "1638:27:62",
                                "nodeType": "YulAssignment",
                                "src": "1638:27:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nativeSrc": "1652:6:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "1652:6:62"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1660:4:62",
                                      "nodeType": "YulLiteral",
                                      "src": "1660:4:62",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "1648:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1648:3:62"
                                  },
                                  "nativeSrc": "1648:17:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1648:17:62"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nativeSrc": "1638:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1638:6:62"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nativeSrc": "1440:1:62",
                                "nodeType": "YulIdentifier",
                                "src": "1440:1:62"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "1443:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "1443:6:62"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "1437:2:62",
                              "nodeType": "YulIdentifier",
                              "src": "1437:2:62"
                            },
                            "nativeSrc": "1437:13:62",
                            "nodeType": "YulFunctionCall",
                            "src": "1437:13:62"
                          },
                          "nativeSrc": "1429:246:62",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "1451:18:62",
                            "nodeType": "YulBlock",
                            "src": "1451:18:62",
                            "statements": [
                              {
                                "nativeSrc": "1453:14:62",
                                "nodeType": "YulAssignment",
                                "src": "1453:14:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "1462:1:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "1462:1:62"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1465:1:62",
                                      "nodeType": "YulLiteral",
                                      "src": "1465:1:62",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "1458:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1458:3:62"
                                  },
                                  "nativeSrc": "1458:9:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1458:9:62"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "1453:1:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "1453:1:62"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "1433:3:62",
                            "nodeType": "YulBlock",
                            "src": "1433:3:62",
                            "statements": []
                          },
                          "src": "1429:246:62"
                        },
                        {
                          "nativeSrc": "1684:10:62",
                          "nodeType": "YulAssignment",
                          "src": "1684:10:62",
                          "value": {
                            "name": "pos",
                            "nativeSrc": "1691:3:62",
                            "nodeType": "YulIdentifier",
                            "src": "1691:3:62"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "1684:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "1684:3:62"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_array_bytes4_dyn",
                    "nativeSrc": "1208:492:62",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1245:5:62",
                        "nodeType": "YulTypedName",
                        "src": "1245:5:62",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "1252:3:62",
                        "nodeType": "YulTypedName",
                        "src": "1252:3:62",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "1260:3:62",
                        "nodeType": "YulTypedName",
                        "src": "1260:3:62",
                        "type": ""
                      }
                    ],
                    "src": "1208:492:62"
                  },
                  {
                    "body": {
                      "nativeSrc": "1904:843:62",
                      "nodeType": "YulBlock",
                      "src": "1904:843:62",
                      "statements": [
                        {
                          "nativeSrc": "1914:32:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1914:32:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1932:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "1932:9:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1943:2:62",
                                "nodeType": "YulLiteral",
                                "src": "1943:2:62",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1928:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "1928:3:62"
                            },
                            "nativeSrc": "1928:18:62",
                            "nodeType": "YulFunctionCall",
                            "src": "1928:18:62"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nativeSrc": "1918:6:62",
                              "nodeType": "YulTypedName",
                              "src": "1918:6:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1962:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "1962:9:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1973:2:62",
                                "nodeType": "YulLiteral",
                                "src": "1973:2:62",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1955:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "1955:6:62"
                            },
                            "nativeSrc": "1955:21:62",
                            "nodeType": "YulFunctionCall",
                            "src": "1955:21:62"
                          },
                          "nativeSrc": "1955:21:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "1955:21:62"
                        },
                        {
                          "nativeSrc": "1985:17:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1985:17:62",
                          "value": {
                            "name": "tail_1",
                            "nativeSrc": "1996:6:62",
                            "nodeType": "YulIdentifier",
                            "src": "1996:6:62"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nativeSrc": "1989:3:62",
                              "nodeType": "YulTypedName",
                              "src": "1989:3:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2011:27:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2011:27:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "2031:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "2031:6:62"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "2025:5:62",
                              "nodeType": "YulIdentifier",
                              "src": "2025:5:62"
                            },
                            "nativeSrc": "2025:13:62",
                            "nodeType": "YulFunctionCall",
                            "src": "2025:13:62"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "2015:6:62",
                              "nodeType": "YulTypedName",
                              "src": "2015:6:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nativeSrc": "2054:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "2054:6:62"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2062:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "2062:6:62"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2047:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "2047:6:62"
                            },
                            "nativeSrc": "2047:22:62",
                            "nodeType": "YulFunctionCall",
                            "src": "2047:22:62"
                          },
                          "nativeSrc": "2047:22:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "2047:22:62"
                        },
                        {
                          "nativeSrc": "2078:25:62",
                          "nodeType": "YulAssignment",
                          "src": "2078:25:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2089:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "2089:9:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2100:2:62",
                                "nodeType": "YulLiteral",
                                "src": "2100:2:62",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2085:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "2085:3:62"
                            },
                            "nativeSrc": "2085:18:62",
                            "nodeType": "YulFunctionCall",
                            "src": "2085:18:62"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "2078:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "2078:3:62"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2112:53:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2112:53:62",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2134:9:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2134:9:62"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2149:1:62",
                                        "nodeType": "YulLiteral",
                                        "src": "2149:1:62",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "2152:6:62",
                                        "nodeType": "YulIdentifier",
                                        "src": "2152:6:62"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "2145:3:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "2145:3:62"
                                    },
                                    "nativeSrc": "2145:14:62",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2145:14:62"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2130:3:62",
                                  "nodeType": "YulIdentifier",
                                  "src": "2130:3:62"
                                },
                                "nativeSrc": "2130:30:62",
                                "nodeType": "YulFunctionCall",
                                "src": "2130:30:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2162:2:62",
                                "nodeType": "YulLiteral",
                                "src": "2162:2:62",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2126:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "2126:3:62"
                            },
                            "nativeSrc": "2126:39:62",
                            "nodeType": "YulFunctionCall",
                            "src": "2126:39:62"
                          },
                          "variables": [
                            {
                              "name": "tail_2",
                              "nativeSrc": "2116:6:62",
                              "nodeType": "YulTypedName",
                              "src": "2116:6:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2174:29:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2174:29:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "2192:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "2192:6:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2200:2:62",
                                "nodeType": "YulLiteral",
                                "src": "2200:2:62",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2188:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "2188:3:62"
                            },
                            "nativeSrc": "2188:15:62",
                            "nodeType": "YulFunctionCall",
                            "src": "2188:15:62"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nativeSrc": "2178:6:62",
                              "nodeType": "YulTypedName",
                              "src": "2178:6:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2212:10:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2212:10:62",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "2221:1:62",
                            "nodeType": "YulLiteral",
                            "src": "2221:1:62",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nativeSrc": "2216:1:62",
                              "nodeType": "YulTypedName",
                              "src": "2216:1:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "2280:438:62",
                            "nodeType": "YulBlock",
                            "src": "2280:438:62",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nativeSrc": "2301:3:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "2301:3:62"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_2",
                                              "nativeSrc": "2314:6:62",
                                              "nodeType": "YulIdentifier",
                                              "src": "2314:6:62"
                                            },
                                            {
                                              "name": "headStart",
                                              "nativeSrc": "2322:9:62",
                                              "nodeType": "YulIdentifier",
                                              "src": "2322:9:62"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nativeSrc": "2310:3:62",
                                            "nodeType": "YulIdentifier",
                                            "src": "2310:3:62"
                                          },
                                          "nativeSrc": "2310:22:62",
                                          "nodeType": "YulFunctionCall",
                                          "src": "2310:22:62"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "2338:2:62",
                                              "nodeType": "YulLiteral",
                                              "src": "2338:2:62",
                                              "type": "",
                                              "value": "63"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nativeSrc": "2334:3:62",
                                            "nodeType": "YulIdentifier",
                                            "src": "2334:3:62"
                                          },
                                          "nativeSrc": "2334:7:62",
                                          "nodeType": "YulFunctionCall",
                                          "src": "2334:7:62"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "2306:3:62",
                                        "nodeType": "YulIdentifier",
                                        "src": "2306:3:62"
                                      },
                                      "nativeSrc": "2306:36:62",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2306:36:62"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "2294:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2294:6:62"
                                  },
                                  "nativeSrc": "2294:49:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2294:49:62"
                                },
                                "nativeSrc": "2294:49:62",
                                "nodeType": "YulExpressionStatement",
                                "src": "2294:49:62"
                              },
                              {
                                "nativeSrc": "2356:23:62",
                                "nodeType": "YulVariableDeclaration",
                                "src": "2356:23:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nativeSrc": "2372:6:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "2372:6:62"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nativeSrc": "2366:5:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2366:5:62"
                                  },
                                  "nativeSrc": "2366:13:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2366:13:62"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "2360:2:62",
                                    "nodeType": "YulTypedName",
                                    "src": "2360:2:62",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "tail_2",
                                      "nativeSrc": "2399:6:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "2399:6:62"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_1",
                                              "nativeSrc": "2417:2:62",
                                              "nodeType": "YulIdentifier",
                                              "src": "2417:2:62"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nativeSrc": "2411:5:62",
                                            "nodeType": "YulIdentifier",
                                            "src": "2411:5:62"
                                          },
                                          "nativeSrc": "2411:9:62",
                                          "nodeType": "YulFunctionCall",
                                          "src": "2411:9:62"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2422:42:62",
                                          "nodeType": "YulLiteral",
                                          "src": "2422:42:62",
                                          "type": "",
                                          "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "2407:3:62",
                                        "nodeType": "YulIdentifier",
                                        "src": "2407:3:62"
                                      },
                                      "nativeSrc": "2407:58:62",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2407:58:62"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "2392:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2392:6:62"
                                  },
                                  "nativeSrc": "2392:74:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2392:74:62"
                                },
                                "nativeSrc": "2392:74:62",
                                "nodeType": "YulExpressionStatement",
                                "src": "2392:74:62"
                              },
                              {
                                "nativeSrc": "2479:38:62",
                                "nodeType": "YulVariableDeclaration",
                                "src": "2479:38:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_1",
                                          "nativeSrc": "2509:2:62",
                                          "nodeType": "YulIdentifier",
                                          "src": "2509:2:62"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2513:2:62",
                                          "nodeType": "YulLiteral",
                                          "src": "2513:2:62",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "2505:3:62",
                                        "nodeType": "YulIdentifier",
                                        "src": "2505:3:62"
                                      },
                                      "nativeSrc": "2505:11:62",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2505:11:62"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nativeSrc": "2499:5:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2499:5:62"
                                  },
                                  "nativeSrc": "2499:18:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2499:18:62"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0",
                                    "nativeSrc": "2483:12:62",
                                    "nodeType": "YulTypedName",
                                    "src": "2483:12:62",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nativeSrc": "2541:6:62",
                                          "nodeType": "YulIdentifier",
                                          "src": "2541:6:62"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2549:2:62",
                                          "nodeType": "YulLiteral",
                                          "src": "2549:2:62",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "2537:3:62",
                                        "nodeType": "YulIdentifier",
                                        "src": "2537:3:62"
                                      },
                                      "nativeSrc": "2537:15:62",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2537:15:62"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2554:2:62",
                                      "nodeType": "YulLiteral",
                                      "src": "2554:2:62",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "2530:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2530:6:62"
                                  },
                                  "nativeSrc": "2530:27:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2530:27:62"
                                },
                                "nativeSrc": "2530:27:62",
                                "nodeType": "YulExpressionStatement",
                                "src": "2530:27:62"
                              },
                              {
                                "nativeSrc": "2570:68:62",
                                "nodeType": "YulAssignment",
                                "src": "2570:68:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0",
                                      "nativeSrc": "2608:12:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "2608:12:62"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nativeSrc": "2626:6:62",
                                          "nodeType": "YulIdentifier",
                                          "src": "2626:6:62"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2634:2:62",
                                          "nodeType": "YulLiteral",
                                          "src": "2634:2:62",
                                          "type": "",
                                          "value": "64"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "2622:3:62",
                                        "nodeType": "YulIdentifier",
                                        "src": "2622:3:62"
                                      },
                                      "nativeSrc": "2622:15:62",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2622:15:62"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_array_bytes4_dyn",
                                    "nativeSrc": "2580:27:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2580:27:62"
                                  },
                                  "nativeSrc": "2580:58:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2580:58:62"
                                },
                                "variableNames": [
                                  {
                                    "name": "tail_2",
                                    "nativeSrc": "2570:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2570:6:62"
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "2651:25:62",
                                "nodeType": "YulAssignment",
                                "src": "2651:25:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nativeSrc": "2665:6:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "2665:6:62"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2673:2:62",
                                      "nodeType": "YulLiteral",
                                      "src": "2673:2:62",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "2661:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2661:3:62"
                                  },
                                  "nativeSrc": "2661:15:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2661:15:62"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nativeSrc": "2651:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2651:6:62"
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "2689:19:62",
                                "nodeType": "YulAssignment",
                                "src": "2689:19:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nativeSrc": "2700:3:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "2700:3:62"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2705:2:62",
                                      "nodeType": "YulLiteral",
                                      "src": "2705:2:62",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "2696:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2696:3:62"
                                  },
                                  "nativeSrc": "2696:12:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2696:12:62"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "2689:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2689:3:62"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nativeSrc": "2242:1:62",
                                "nodeType": "YulIdentifier",
                                "src": "2242:1:62"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2245:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "2245:6:62"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "2239:2:62",
                              "nodeType": "YulIdentifier",
                              "src": "2239:2:62"
                            },
                            "nativeSrc": "2239:13:62",
                            "nodeType": "YulFunctionCall",
                            "src": "2239:13:62"
                          },
                          "nativeSrc": "2231:487:62",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "2253:18:62",
                            "nodeType": "YulBlock",
                            "src": "2253:18:62",
                            "statements": [
                              {
                                "nativeSrc": "2255:14:62",
                                "nodeType": "YulAssignment",
                                "src": "2255:14:62",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "2264:1:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "2264:1:62"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2267:1:62",
                                      "nodeType": "YulLiteral",
                                      "src": "2267:1:62",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "2260:3:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2260:3:62"
                                  },
                                  "nativeSrc": "2260:9:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2260:9:62"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "2255:1:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2255:1:62"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "2235:3:62",
                            "nodeType": "YulBlock",
                            "src": "2235:3:62",
                            "statements": []
                          },
                          "src": "2231:487:62"
                        },
                        {
                          "nativeSrc": "2727:14:62",
                          "nodeType": "YulAssignment",
                          "src": "2727:14:62",
                          "value": {
                            "name": "tail_2",
                            "nativeSrc": "2735:6:62",
                            "nodeType": "YulIdentifier",
                            "src": "2735:6:62"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2727:4:62",
                              "nodeType": "YulIdentifier",
                              "src": "2727:4:62"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_struct$_Facet_$13955_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Facet_$13955_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
                    "nativeSrc": "1705:1042:62",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1873:9:62",
                        "nodeType": "YulTypedName",
                        "src": "1873:9:62",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "1884:6:62",
                        "nodeType": "YulTypedName",
                        "src": "1884:6:62",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "1895:4:62",
                        "nodeType": "YulTypedName",
                        "src": "1895:4:62",
                        "type": ""
                      }
                    ],
                    "src": "1705:1042:62"
                  },
                  {
                    "body": {
                      "nativeSrc": "2822:239:62",
                      "nodeType": "YulBlock",
                      "src": "2822:239:62",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "2868:16:62",
                            "nodeType": "YulBlock",
                            "src": "2868:16:62",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2877:1:62",
                                      "nodeType": "YulLiteral",
                                      "src": "2877:1:62",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2880:1:62",
                                      "nodeType": "YulLiteral",
                                      "src": "2880:1:62",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "2870:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2870:6:62"
                                  },
                                  "nativeSrc": "2870:12:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2870:12:62"
                                },
                                "nativeSrc": "2870:12:62",
                                "nodeType": "YulExpressionStatement",
                                "src": "2870:12:62"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "2843:7:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2843:7:62"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2852:9:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2852:9:62"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "2839:3:62",
                                  "nodeType": "YulIdentifier",
                                  "src": "2839:3:62"
                                },
                                "nativeSrc": "2839:23:62",
                                "nodeType": "YulFunctionCall",
                                "src": "2839:23:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2864:2:62",
                                "nodeType": "YulLiteral",
                                "src": "2864:2:62",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "2835:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "2835:3:62"
                            },
                            "nativeSrc": "2835:32:62",
                            "nodeType": "YulFunctionCall",
                            "src": "2835:32:62"
                          },
                          "nativeSrc": "2832:52:62",
                          "nodeType": "YulIf",
                          "src": "2832:52:62"
                        },
                        {
                          "nativeSrc": "2893:36:62",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2893:36:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2919:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "2919:9:62"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "2906:12:62",
                              "nodeType": "YulIdentifier",
                              "src": "2906:12:62"
                            },
                            "nativeSrc": "2906:23:62",
                            "nodeType": "YulFunctionCall",
                            "src": "2906:23:62"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nativeSrc": "2897:5:62",
                              "nodeType": "YulTypedName",
                              "src": "2897:5:62",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "3015:16:62",
                            "nodeType": "YulBlock",
                            "src": "3015:16:62",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3024:1:62",
                                      "nodeType": "YulLiteral",
                                      "src": "3024:1:62",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3027:1:62",
                                      "nodeType": "YulLiteral",
                                      "src": "3027:1:62",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "3017:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "3017:6:62"
                                  },
                                  "nativeSrc": "3017:12:62",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3017:12:62"
                                },
                                "nativeSrc": "3017:12:62",
                                "nodeType": "YulExpressionStatement",
                                "src": "3017:12:62"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "2951:5:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "2951:5:62"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "2962:5:62",
                                        "nodeType": "YulIdentifier",
                                        "src": "2962:5:62"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2969:42:62",
                                        "nodeType": "YulLiteral",
                                        "src": "2969:42:62",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "2958:3:62",
                                      "nodeType": "YulIdentifier",
                                      "src": "2958:3:62"
                                    },
                                    "nativeSrc": "2958:54:62",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2958:54:62"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "2948:2:62",
                                  "nodeType": "YulIdentifier",
                                  "src": "2948:2:62"
                                },
                                "nativeSrc": "2948:65:62",
                                "nodeType": "YulFunctionCall",
                                "src": "2948:65:62"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "2941:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "2941:6:62"
                            },
                            "nativeSrc": "2941:73:62",
                            "nodeType": "YulFunctionCall",
                            "src": "2941:73:62"
                          },
                          "nativeSrc": "2938:93:62",
                          "nodeType": "YulIf",
                          "src": "2938:93:62"
                        },
                        {
                          "nativeSrc": "3040:15:62",
                          "nodeType": "YulAssignment",
                          "src": "3040:15:62",
                          "value": {
                            "name": "value",
                            "nativeSrc": "3050:5:62",
                            "nodeType": "YulIdentifier",
                            "src": "3050:5:62"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nativeSrc": "3040:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "3040:6:62"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nativeSrc": "2752:309:62",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2788:9:62",
                        "nodeType": "YulTypedName",
                        "src": "2788:9:62",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "2799:7:62",
                        "nodeType": "YulTypedName",
                        "src": "2799:7:62",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "2811:6:62",
                        "nodeType": "YulTypedName",
                        "src": "2811:6:62",
                        "type": ""
                      }
                    ],
                    "src": "2752:309:62"
                  },
                  {
                    "body": {
                      "nativeSrc": "3215:109:62",
                      "nodeType": "YulBlock",
                      "src": "3215:109:62",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3232:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "3232:9:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3243:2:62",
                                "nodeType": "YulLiteral",
                                "src": "3243:2:62",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3225:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "3225:6:62"
                            },
                            "nativeSrc": "3225:21:62",
                            "nodeType": "YulFunctionCall",
                            "src": "3225:21:62"
                          },
                          "nativeSrc": "3225:21:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "3225:21:62"
                        },
                        {
                          "nativeSrc": "3255:63:62",
                          "nodeType": "YulAssignment",
                          "src": "3255:63:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "3291:6:62",
                                "nodeType": "YulIdentifier",
                                "src": "3291:6:62"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3303:9:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "3303:9:62"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3314:2:62",
                                    "nodeType": "YulLiteral",
                                    "src": "3314:2:62",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3299:3:62",
                                  "nodeType": "YulIdentifier",
                                  "src": "3299:3:62"
                                },
                                "nativeSrc": "3299:18:62",
                                "nodeType": "YulFunctionCall",
                                "src": "3299:18:62"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_bytes4_dyn",
                              "nativeSrc": "3263:27:62",
                              "nodeType": "YulIdentifier",
                              "src": "3263:27:62"
                            },
                            "nativeSrc": "3263:55:62",
                            "nodeType": "YulFunctionCall",
                            "src": "3263:55:62"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "3255:4:62",
                              "nodeType": "YulIdentifier",
                              "src": "3255:4:62"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_bytes4_$dyn_memory_ptr__to_t_array$_t_bytes4_$dyn_memory_ptr__fromStack_reversed",
                    "nativeSrc": "3066:258:62",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3184:9:62",
                        "nodeType": "YulTypedName",
                        "src": "3184:9:62",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "3195:6:62",
                        "nodeType": "YulTypedName",
                        "src": "3195:6:62",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "3206:4:62",
                        "nodeType": "YulTypedName",
                        "src": "3206:4:62",
                        "type": ""
                      }
                    ],
                    "src": "3066:258:62"
                  },
                  {
                    "body": {
                      "nativeSrc": "3430:125:62",
                      "nodeType": "YulBlock",
                      "src": "3430:125:62",
                      "statements": [
                        {
                          "nativeSrc": "3440:26:62",
                          "nodeType": "YulAssignment",
                          "src": "3440:26:62",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3452:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "3452:9:62"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3463:2:62",
                                "nodeType": "YulLiteral",
                                "src": "3463:2:62",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3448:3:62",
                              "nodeType": "YulIdentifier",
                              "src": "3448:3:62"
                            },
                            "nativeSrc": "3448:18:62",
                            "nodeType": "YulFunctionCall",
                            "src": "3448:18:62"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "3440:4:62",
                              "nodeType": "YulIdentifier",
                              "src": "3440:4:62"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3482:9:62",
                                "nodeType": "YulIdentifier",
                                "src": "3482:9:62"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "3497:6:62",
                                    "nodeType": "YulIdentifier",
                                    "src": "3497:6:62"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3505:42:62",
                                    "nodeType": "YulLiteral",
                                    "src": "3505:42:62",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "3493:3:62",
                                  "nodeType": "YulIdentifier",
                                  "src": "3493:3:62"
                                },
                                "nativeSrc": "3493:55:62",
                                "nodeType": "YulFunctionCall",
                                "src": "3493:55:62"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3475:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "3475:6:62"
                            },
                            "nativeSrc": "3475:74:62",
                            "nodeType": "YulFunctionCall",
                            "src": "3475:74:62"
                          },
                          "nativeSrc": "3475:74:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "3475:74:62"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "3329:226:62",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3399:9:62",
                        "nodeType": "YulTypedName",
                        "src": "3399:9:62",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "3410:6:62",
                        "nodeType": "YulTypedName",
                        "src": "3410:6:62",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "3421:4:62",
                        "nodeType": "YulTypedName",
                        "src": "3421:4:62",
                        "type": ""
                      }
                    ],
                    "src": "3329:226:62"
                  },
                  {
                    "body": {
                      "nativeSrc": "3592:152:62",
                      "nodeType": "YulBlock",
                      "src": "3592:152:62",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3609:1:62",
                                "nodeType": "YulLiteral",
                                "src": "3609:1:62",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3612:77:62",
                                "nodeType": "YulLiteral",
                                "src": "3612:77:62",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3602:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "3602:6:62"
                            },
                            "nativeSrc": "3602:88:62",
                            "nodeType": "YulFunctionCall",
                            "src": "3602:88:62"
                          },
                          "nativeSrc": "3602:88:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "3602:88:62"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3706:1:62",
                                "nodeType": "YulLiteral",
                                "src": "3706:1:62",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3709:4:62",
                                "nodeType": "YulLiteral",
                                "src": "3709:4:62",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3699:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "3699:6:62"
                            },
                            "nativeSrc": "3699:15:62",
                            "nodeType": "YulFunctionCall",
                            "src": "3699:15:62"
                          },
                          "nativeSrc": "3699:15:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "3699:15:62"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3730:1:62",
                                "nodeType": "YulLiteral",
                                "src": "3730:1:62",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3733:4:62",
                                "nodeType": "YulLiteral",
                                "src": "3733:4:62",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "3723:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "3723:6:62"
                            },
                            "nativeSrc": "3723:15:62",
                            "nodeType": "YulFunctionCall",
                            "src": "3723:15:62"
                          },
                          "nativeSrc": "3723:15:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "3723:15:62"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nativeSrc": "3560:184:62",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3560:184:62"
                  },
                  {
                    "body": {
                      "nativeSrc": "3781:152:62",
                      "nodeType": "YulBlock",
                      "src": "3781:152:62",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3798:1:62",
                                "nodeType": "YulLiteral",
                                "src": "3798:1:62",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3801:77:62",
                                "nodeType": "YulLiteral",
                                "src": "3801:77:62",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3791:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "3791:6:62"
                            },
                            "nativeSrc": "3791:88:62",
                            "nodeType": "YulFunctionCall",
                            "src": "3791:88:62"
                          },
                          "nativeSrc": "3791:88:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "3791:88:62"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3895:1:62",
                                "nodeType": "YulLiteral",
                                "src": "3895:1:62",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3898:4:62",
                                "nodeType": "YulLiteral",
                                "src": "3898:4:62",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3888:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "3888:6:62"
                            },
                            "nativeSrc": "3888:15:62",
                            "nodeType": "YulFunctionCall",
                            "src": "3888:15:62"
                          },
                          "nativeSrc": "3888:15:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "3888:15:62"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3919:1:62",
                                "nodeType": "YulLiteral",
                                "src": "3919:1:62",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3922:4:62",
                                "nodeType": "YulLiteral",
                                "src": "3922:4:62",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "3912:6:62",
                              "nodeType": "YulIdentifier",
                              "src": "3912:6:62"
                            },
                            "nativeSrc": "3912:15:62",
                            "nodeType": "YulFunctionCall",
                            "src": "3912:15:62"
                          },
                          "nativeSrc": "3912:15:62",
                          "nodeType": "YulExpressionStatement",
                          "src": "3912:15:62"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nativeSrc": "3749:184:62",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3749:184:62"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let tail_1 := add(headStart, 32)\n        mstore(headStart, 32)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, 32)\n            srcPtr := add(srcPtr, 32)\n        }\n        tail := pos\n    }\n    function abi_encode_array_bytes4_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        pos := add(pos, 0x20)\n        let srcPtr := add(value, 0x20)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffff00000000000000000000000000000000000000000000000000000000))\n            pos := add(pos, 0x20)\n            srcPtr := add(srcPtr, 0x20)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_array$_t_struct$_Facet_$13955_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Facet_$13955_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let tail_1 := add(headStart, 32)\n        mstore(headStart, 32)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _1 := mload(srcPtr)\n            mstore(tail_2, and(mload(_1), 0xffffffffffffffffffffffffffffffffffffffff))\n            let memberValue0 := mload(add(_1, 32))\n            mstore(add(tail_2, 32), 64)\n            tail_2 := abi_encode_array_bytes4_dyn(memberValue0, add(tail_2, 64))\n            srcPtr := add(srcPtr, 32)\n            pos := add(pos, 32)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_array$_t_bytes4_$dyn_memory_ptr__to_t_array$_t_bytes4_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_bytes4_dyn(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}",
              "id": 62,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100e2578063adfca15e146100f7578063cdffacc61461011757600080fd5b806301ffc9a71461006c57806352ef6b2c146100cd575b600080fd5b6100b861007a3660046104df565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100d5610181565b6040516100c49190610510565b6100ea610206565b6040516100c491906105a2565b61010a610105366004610627565b6103ec565b6040516100c49190610650565b6101696101253660046104df565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c60205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016100c4565b606060007fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600281018054604080516020808402820181019092528281529394508301828280156101fb57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101dd575b505050505091505090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e546060907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c908067ffffffffffffffff81111561026657610266610663565b6040519080825280602002602001820160405280156102ac57816020015b6040805180820190915260008152606060208201528152602001906001900390816102845790505b50925060005b818110156103e65760008360020182815481106102d1576102d1610679565b9060005260206000200160009054906101000a90046001600160a01b031690508085838151811061030457610304610679565b6020908102919091018101516001600160a01b0392831690529082166000908152600186018252604090819020805482518185028101850190935280835291929091908301828280156103b857602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103655790505b50505050508583815181106103cf576103cf610679565b6020908102919091018101510152506001016102b2565b50505090565b6001600160a01b03811660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602090815260409182902080548351818402810184019094528084526060937fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c93909291908301828280156104d257602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161047f5790505b5050505050915050919050565b6000602082840312156104f157600080fd5b81356001600160e01b03198116811461050957600080fd5b9392505050565b602080825282518282018190526000918401906040840190835b818110156105515783516001600160a01b031683526020938401939092019160010161052a565b509095945050505050565b600081518084526020840193506020830160005b828110156105985781516001600160e01b031916865260209586019590910190600101610570565b5093949350505050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561061b57603f1987860301845281516001600160a01b0381511686526020810151905060406020870152610605604087018261055c565b95505060209384019391909101906001016105ca565b50929695505050505050565b60006020828403121561063957600080fd5b81356001600160a01b038116811461050957600080fd5b602081526000610509602083018461055c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220f82f9e1a73e9631c8d834aa655d2f272772fe02f8afad9490d0828e23bec05a164736f6c634300081b0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A0ED627 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x7A0ED627 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0xADFCA15E EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0xCDFFACC6 EQ PUSH2 0x117 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x52EF6B2C EQ PUSH2 0xCD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB8 PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131F PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD5 PUSH2 0x181 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC4 SWAP2 SWAP1 PUSH2 0x510 JUMP JUMPDEST PUSH2 0xEA PUSH2 0x206 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC4 SWAP2 SWAP1 PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x10A PUSH2 0x105 CALLDATASIZE PUSH1 0x4 PUSH2 0x627 JUMP JUMPDEST PUSH2 0x3EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC4 SWAP2 SWAP1 PUSH2 0x650 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0x4DF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC4 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP4 SWAP5 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1DD JUMPI JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131E SLOAD PUSH1 0x60 SWAP1 PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x266 JUMPI PUSH2 0x266 PUSH2 0x663 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2AC JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x284 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP4 PUSH1 0x2 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2D1 JUMPI PUSH2 0x2D1 PUSH2 0x679 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x304 JUMPI PUSH2 0x304 PUSH2 0x679 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP1 MSTORE SWAP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP7 ADD DUP3 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x3B8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x365 JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3CF JUMPI PUSH2 0x3CF PUSH2 0x679 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x2B2 JUMP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 0x60 SWAP4 PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x4 ADD SWAP1 PUSH1 0x20 DUP3 PUSH1 0x3 ADD DIV SWAP3 DUP4 ADD SWAP3 PUSH1 0x1 SUB DUP3 MUL SWAP2 POP DUP1 DUP5 GT PUSH2 0x47F JUMPI SWAP1 POP JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x551 JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x52A JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x598 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x570 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH1 0x20 DUP4 MSTORE DUP1 DUP5 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP6 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP7 ADD ADD SWAP3 POP PUSH1 0x20 DUP7 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x61B JUMPI PUSH1 0x3F NOT DUP8 DUP7 SUB ADD DUP5 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND DUP7 MSTORE PUSH1 0x20 DUP2 ADD MLOAD SWAP1 POP PUSH1 0x40 PUSH1 0x20 DUP8 ADD MSTORE PUSH2 0x605 PUSH1 0x40 DUP8 ADD DUP3 PUSH2 0x55C JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5CA JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x509 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x55C JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 0x2F SWAP15 BYTE PUSH20 0xE9631C8D834AA655D2F272772FE02F8AFAD9490D ADDMOD 0x28 0xE2 EXTCODESIZE 0xEC SDIV LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
          "sourceMap": "698:2484:44:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2958:222;;;;;;:::i;:::-;-1:-1:-1;;;;;;3137:36:44;3038:4;3137:36;;;:22;:36;;;;;;;;;2958:222;;;;516:14:62;;509:22;491:41;;479:2;464:18;2958:222:44;;;;;;;;2197:220;;;:::i;:::-;;;;;;;:::i;1126:523::-;;;:::i;:::-;;;;;;;:::i;1805:291::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2647:273::-;;;;;;:::i;:::-;-1:-1:-1;;;;;;2852:48:44;2727:21;2852:48;;;745:45:60;2852:48:44;;;;;:61;-1:-1:-1;;;;;2852:61:44;;2647:273;;;;-1:-1:-1;;;;;3493:55:62;;;3475:74;;3463:2;3448:18;2647:273:44;3329:226:62;2197:220:44;2255:32;2299:36;745:45:60;2393:17:44;;;2375:35;;;;;;;;;;;;;;;;;;;2299:66;;-1:-1:-1;2375:35:44;;2393:17;2375:35;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2375:35:44;;;;;;;;;;;;;;;;;;;;;;;2289:128;2197:220;:::o;1126:523::-;1306:17;:24;1176:22;;745:45:60;;1306:24:44;1350:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;1350:22:44;;;;;;;;;;;;;;;;1340:32;;1387:9;1382:261;1402:9;1398:1;:13;1382:261;;;1432:21;1456:2;:17;;1474:1;1456:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1456:20:44;1432:44;;1516:13;1490:7;1498:1;1490:10;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1490:39:44;;;;;1574:40;;;1490:23;1574:40;;;:25;;;:40;;;;;;;1543:89;;;;;;;;;;;;;;;;;;;1574:40;;1543:89;;;1574:40;1543:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;1551:1;1543:10;;;;;;;;:::i;:::-;;;;;;;;;;;;:28;:89;-1:-1:-1;1413:3:44;;1382:261;;;;1200:449;;1126:523;:::o;1805:291::-;-1:-1:-1;;;;;2038:33:44;;1936:36;2038:33;;;:25;:33;;;;;;;;;2012:77;;;;;;;;;;;;;;;;;1885:39;;745:45:60;;2012:77:44;;2038:33;2012:77;;;2038:33;2012:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1926:170;1805:291;;;:::o;14:332:62:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;-1:-1:-1;;;;;;223:5:62;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:62:o;543:660::-;733:2;745:21;;;815:13;;718:18;;;837:22;;;685:4;;916:15;;;890:2;875:18;;;685:4;959:218;973:6;970:1;967:13;959:218;;;1038:13;;-1:-1:-1;;;;;1034:62:62;1022:75;;1126:2;1152:15;;;;1117:12;;;;995:1;988:9;959:218;;;-1:-1:-1;1194:3:62;;543:660;-1:-1:-1;;;;;543:660:62:o;1208:492::-;1260:3;1298:5;1292:12;1325:6;1320:3;1313:19;1357:4;1352:3;1348:14;1341:21;;1396:4;1389:5;1385:16;1419:1;1429:246;1443:6;1440:1;1437:13;1429:246;;;1508:13;;-1:-1:-1;;;;;;1504:86:62;1492:99;;1620:4;1611:14;;;;1648:17;;;;1465:1;1458:9;1429:246;;;-1:-1:-1;1691:3:62;;1208:492;-1:-1:-1;;;;1208:492:62:o;1705:1042::-;1895:4;1943:2;1932:9;1928:18;1973:2;1962:9;1955:21;1996:6;2031;2025:13;2062:6;2054;2047:22;2100:2;2089:9;2085:18;2078:25;;2162:2;2152:6;2149:1;2145:14;2134:9;2130:30;2126:39;2112:53;;2200:2;2192:6;2188:15;2221:1;2231:487;2245:6;2242:1;2239:13;2231:487;;;2338:2;2334:7;2322:9;2314:6;2310:22;2306:36;2301:3;2294:49;2372:6;2366:13;-1:-1:-1;;;;;2417:2:62;2411:9;2407:58;2399:6;2392:74;2513:2;2509;2505:11;2499:18;2479:38;;2554:2;2549;2541:6;2537:15;2530:27;2580:58;2634:2;2626:6;2622:15;2608:12;2580:58;:::i;:::-;2570:68;-1:-1:-1;;2673:2:62;2696:12;;;;2661:15;;;;;2267:1;2260:9;2231:487;;;-1:-1:-1;2735:6:62;;1705:1042;-1:-1:-1;;;;;;1705:1042:62:o;2752:309::-;2811:6;2864:2;2852:9;2843:7;2839:23;2835:32;2832:52;;;2880:1;2877;2870:12;2832:52;2919:9;2906:23;-1:-1:-1;;;;;2962:5:62;2958:54;2951:5;2948:65;2938:93;;3027:1;3024;3017:12;3066:258;3243:2;3232:9;3225:21;3206:4;3263:55;3314:2;3303:9;3299:18;3291:6;3263:55;:::i;3560:184::-;-1:-1:-1;;;3609:1:62;3602:88;3709:4;3706:1;3699:15;3733:4;3730:1;3723:15;3749:184;-1:-1:-1;;;3798:1:62;3791:88;3898:4;3895:1;3888:15;3922:4;3919:1;3912:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "346600",
            "executionCost": "386",
            "totalCost": "346986"
          },
          "external": {
            "facetAddress(bytes4)": "2591",
            "facetAddresses()": "infinite",
            "facetFunctionSelectors(address)": "infinite",
            "facets()": "infinite",
            "supportsInterface(bytes4)": "2510"
          }
        },
        "methodIdentifiers": {
          "facetAddress(bytes4)": "cdffacc6",
          "facetAddresses()": "52ef6b2c",
          "facetFunctionSelectors(address)": "adfca15e",
          "facets()": "7a0ed627",
          "supportsInterface(bytes4)": "01ffc9a7"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"facetAddress_\":\"The facet address.\"}},\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"facetAddresses_\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"facetFunctionSelectors_\":\"facetFunctionSelectors_\"}},\"facets()\":{\"returns\":{\"facets_\":\"Facet\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors provided by a facet.\"},\"facets()\":{\"notice\":\"Gets all facets and their selectors.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/diamond/DiamondCutLoupe.sol\":\"DiamondLoupeFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/facets/diamond/DiamondCutLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { LibDiamond } from  \\\"../../libraries/diamond/LibDiamond.sol\\\";\\nimport { IDiamondLoupe } from \\\"../../interfaces/diamond/IDiamondLoupe.sol\\\";\\nimport { IERC165 } from \\\"../../interfaces/diamond/IERC165.sol\\\";\\n\\n// The functions in DiamondLoupeFacet MUST be added to a diamond.\\n// The EIP-2535 Diamond standard requires these functions.\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently by tools.\\n    //\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external override view returns (Facet[] memory facets_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 numFacets = ds.facetAddresses.length;\\n        facets_ = new Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress_ = ds.facetAddresses[i];\\n            facets_[i].facetAddress = facetAddress_;\\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory facetFunctionSelectors_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddresses_ = ds.facetAddresses;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\",\"keccak256\":\"0x966dc0036f76a00f72729094e294161384660e2a56c36ad9311603e79a293205\",\"license\":\"MIT\"},\"contracts/interfaces/diamond/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"contracts/interfaces/diamond/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x10884024af2c0f7deca0fac4ddf84e76da5dba35b6e02fabeac8ea54c1a5c6f7\",\"license\":\"MIT\"},\"contracts/interfaces/diamond/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7541f7408d0f74162bc4664d5e012427f2ceaab2abadca0353269ef15ee03d8b\",\"license\":\"MIT\"},\"contracts/libraries/diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../../interfaces/diamond/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xf35c0551993e55fd05cf714f37662299cbacef3ce75ea2861a0aa0b1befe655c\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [],
        "types": null
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "facetAddress(bytes4)": {
            "notice": "Gets the facet that supports the given selector."
          },
          "facetAddresses()": {
            "notice": "Get all the facet addresses used by a diamond."
          },
          "facetFunctionSelectors(address)": {
            "notice": "Gets all the function selectors provided by a facet."
          },
          "facets()": {
            "notice": "Gets all facets and their selectors."
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\"\n    },\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\"\n    },\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\"\n    },\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\"\n    },\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\"\n    },\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\"\n    },\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\"\n    },\n    \"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\"\n    },\n    \"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\"\n    },\n    \"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\"\n    },\n    \"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\"\n    },\n    \"@layerzerolabs/oapp-evm/contracts/oapp/libs/ReadCodecV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nstruct EVMCallRequestV1 {\\n    uint16 appRequestLabel; // Label identifying the application or type of request (can be use in lzCompute)\\n    uint32 targetEid; // Target endpoint ID (representing a target blockchain)\\n    bool isBlockNum; // True if the request = block number, false if timestamp\\n    uint64 blockNumOrTimestamp; // Block number or timestamp to use in the request\\n    uint16 confirmations; // Number of block confirmations on top of the requested block number or timestamp before the view function can be called\\n    address to; // Address of the target contract on the target chain\\n    bytes callData; // Calldata for the contract call\\n}\\n\\nstruct EVMCallComputeV1 {\\n    uint8 computeSetting; // Compute setting (0 = map only, 1 = reduce only, 2 = map reduce)\\n    uint32 targetEid; // Target endpoint ID (representing a target blockchain)\\n    bool isBlockNum; // True if the request = block number, false if timestamp\\n    uint64 blockNumOrTimestamp; // Block number or timestamp to use in the request\\n    uint16 confirmations; // Number of block confirmations on top of the requested block number or timestamp before the view function can be called\\n    address to; // Address of the target contract on the target chain\\n}\\n\\nlibrary ReadCodecV1 {\\n    using SafeCast for uint256;\\n\\n    uint16 internal constant CMD_VERSION = 1;\\n\\n    uint8 internal constant REQUEST_VERSION = 1;\\n    uint16 internal constant RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL = 1;\\n\\n    uint8 internal constant COMPUTE_VERSION = 1;\\n    uint16 internal constant COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL = 1;\\n\\n    error InvalidVersion();\\n    error InvalidType();\\n\\n    function decode(\\n        bytes calldata _cmd\\n    )\\n        internal\\n        pure\\n        returns (uint16 appCmdLabel, EVMCallRequestV1[] memory evmCallRequests, EVMCallComputeV1 memory compute)\\n    {\\n        uint256 offset = 0;\\n        uint16 cmdVersion = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n        if (cmdVersion != CMD_VERSION) revert InvalidVersion();\\n\\n        appCmdLabel = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n\\n        (evmCallRequests, offset) = decodeRequestsV1(_cmd, offset);\\n\\n        // decode the compute if it exists\\n        if (offset < _cmd.length) {\\n            (compute, ) = decodeEVMCallComputeV1(_cmd, offset);\\n        }\\n    }\\n\\n    function decodeRequestsV1(\\n        bytes calldata _cmd,\\n        uint256 _offset\\n    ) internal pure returns (EVMCallRequestV1[] memory evmCallRequests, uint256 newOffset) {\\n        newOffset = _offset;\\n        uint16 requestCount = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n\\n        evmCallRequests = new EVMCallRequestV1[](requestCount);\\n        for (uint16 i = 0; i < requestCount; i++) {\\n            uint8 requestVersion = uint8(_cmd[newOffset]);\\n            newOffset += 1;\\n            if (requestVersion != REQUEST_VERSION) revert InvalidVersion();\\n\\n            uint16 appRequestLabel = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n            newOffset += 2;\\n\\n            uint16 resolverType = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n            newOffset += 2;\\n\\n            if (resolverType == RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL) {\\n                (EVMCallRequestV1 memory request, uint256 nextOffset) = decodeEVMCallRequestV1(\\n                    _cmd,\\n                    newOffset,\\n                    appRequestLabel\\n                );\\n                newOffset = nextOffset;\\n                evmCallRequests[i] = request;\\n            } else {\\n                revert InvalidType();\\n            }\\n        }\\n    }\\n\\n    function decodeEVMCallRequestV1(\\n        bytes calldata _cmd,\\n        uint256 _offset,\\n        uint16 _appRequestLabel\\n    ) internal pure returns (EVMCallRequestV1 memory request, uint256 newOffset) {\\n        newOffset = _offset;\\n        request.appRequestLabel = _appRequestLabel;\\n\\n        uint16 requestSize = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        request.targetEid = uint32(bytes4(_cmd[newOffset:newOffset + 4]));\\n        newOffset += 4;\\n        request.isBlockNum = uint8(_cmd[newOffset]) == 1;\\n        newOffset += 1;\\n        request.blockNumOrTimestamp = uint64(bytes8(_cmd[newOffset:newOffset + 8]));\\n        newOffset += 8;\\n        request.confirmations = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        request.to = address(bytes20(_cmd[newOffset:newOffset + 20]));\\n        newOffset += 20;\\n        uint16 callDataSize = requestSize - 35;\\n        request.callData = _cmd[newOffset:newOffset + callDataSize];\\n        newOffset += callDataSize;\\n    }\\n\\n    function decodeEVMCallComputeV1(\\n        bytes calldata _cmd,\\n        uint256 _offset\\n    ) internal pure returns (EVMCallComputeV1 memory compute, uint256 newOffset) {\\n        newOffset = _offset;\\n        uint8 computeVersion = uint8(_cmd[newOffset]);\\n        newOffset += 1;\\n        if (computeVersion != COMPUTE_VERSION) revert InvalidVersion();\\n        uint16 computeType = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        if (computeType != COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL) revert InvalidType();\\n\\n        compute.computeSetting = uint8(_cmd[newOffset]);\\n        newOffset += 1;\\n        compute.targetEid = uint32(bytes4(_cmd[newOffset:newOffset + 4]));\\n        newOffset += 4;\\n        compute.isBlockNum = uint8(_cmd[newOffset]) == 1;\\n        newOffset += 1;\\n        compute.blockNumOrTimestamp = uint64(bytes8(_cmd[newOffset:newOffset + 8]));\\n        newOffset += 8;\\n        compute.confirmations = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        compute.to = address(bytes20(_cmd[newOffset:newOffset + 20]));\\n        newOffset += 20;\\n    }\\n\\n    function decodeCmdAppLabel(bytes calldata _cmd) internal pure returns (uint16) {\\n        uint256 offset = 0;\\n        uint16 cmdVersion = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n        if (cmdVersion != CMD_VERSION) revert InvalidVersion();\\n\\n        return uint16(bytes2(_cmd[offset:offset + 2]));\\n    }\\n\\n    function decodeRequestV1AppRequestLabel(bytes calldata _request) internal pure returns (uint16) {\\n        uint256 offset = 0;\\n        uint8 requestVersion = uint8(_request[offset]);\\n        offset += 1;\\n        if (requestVersion != REQUEST_VERSION) revert InvalidVersion();\\n\\n        return uint16(bytes2(_request[offset:offset + 2]));\\n    }\\n\\n    function encode(\\n        uint16 _appCmdLabel,\\n        EVMCallRequestV1[] memory _evmCallRequests,\\n        EVMCallComputeV1 memory _evmCallCompute\\n    ) internal pure returns (bytes memory) {\\n        bytes memory cmd = encode(_appCmdLabel, _evmCallRequests);\\n        if (_evmCallCompute.targetEid != 0) {\\n            // if eid is 0, it means no compute\\n            cmd = appendEVMCallComputeV1(cmd, _evmCallCompute);\\n        }\\n        return cmd;\\n    }\\n\\n    function encode(\\n        uint16 _appCmdLabel,\\n        EVMCallRequestV1[] memory _evmCallRequests\\n    ) internal pure returns (bytes memory) {\\n        bytes memory cmd = abi.encodePacked(CMD_VERSION, _appCmdLabel, _evmCallRequests.length.toUint16());\\n        for (uint256 i = 0; i < _evmCallRequests.length; i++) {\\n            cmd = appendEVMCallRequestV1(cmd, _evmCallRequests[i]);\\n        }\\n        return cmd;\\n    }\\n\\n    // todo: optimize this with Buffer\\n    function appendEVMCallRequestV1(\\n        bytes memory _cmd,\\n        EVMCallRequestV1 memory _request\\n    ) internal pure returns (bytes memory) {\\n        bytes memory newCmd = abi.encodePacked(\\n            _cmd,\\n            REQUEST_VERSION,\\n            _request.appRequestLabel,\\n            RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL,\\n            (_request.callData.length + 35).toUint16(),\\n            _request.targetEid\\n        );\\n        return\\n            abi.encodePacked(\\n                newCmd,\\n                _request.isBlockNum,\\n                _request.blockNumOrTimestamp,\\n                _request.confirmations,\\n                _request.to,\\n                _request.callData\\n            );\\n    }\\n\\n    function appendEVMCallComputeV1(\\n        bytes memory _cmd,\\n        EVMCallComputeV1 memory _compute\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _cmd,\\n                COMPUTE_VERSION,\\n                COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL,\\n                _compute.computeSetting,\\n                _compute.targetEid,\\n                _compute.isBlockNum,\\n                _compute.blockNumOrTimestamp,\\n                _compute.confirmations,\\n                _compute.to\\n            );\\n    }\\n}\\n\"\n    },\n    \"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\"\n    },\n    \"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\"\n    },\n    \"@layerzerolabs/oapp-evm/contracts/oapp/OAppRead.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { AddressCast } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\n\\nimport { OApp } from \\\"./OApp.sol\\\";\\n\\nabstract contract OAppRead is OApp {\\n    constructor(address _endpoint, address _delegate) OApp(_endpoint, _delegate) {}\\n\\n    // -------------------------------\\n    // Only Owner\\n    function setReadChannel(uint32 _channelId, bool _active) public virtual onlyOwner {\\n        _setPeer(_channelId, _active ? AddressCast.toBytes32(address(this)) : bytes32(0));\\n    }\\n}\\n\"\n    },\n    \"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\"\n    },\n    \"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC1363.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Errors.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2²⁵⁶ + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\\n            // This is going to be our x_0 (and ε_0)\\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\\n            //              = ((x_n² + a) / (2 * x_n))² - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\\n            //              = (x_n² - a)² / (2 * x_n)²\\n            //              = ((x_n² - a) / (2 * x_n))²\\n            //              ≥ 0\\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\\n            //         = | ε_n² / (2 * x_n) |\\n            //         = ε_n² / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // ε_1 = ε_0² / | (2 * x_0) |\\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\\n            //     ≤ 2**(e-3) / 3\\n            //     ≤ 2**(e-3-log2(3))\\n            //     ≤ 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\\n            //         ≤ 2**(2*e-2*k) / 2**e\\n            //         ≤ 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\\n\\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Panic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\n    },\n    \"contracts/connectors/UniswapV3.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../libraries/util/Math.sol\\\";\\n\\ninterface INonfungiblePositionManager is IERC721Enumerable {\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n    external\\n    view\\n    returns (\\n        uint96 nonce,\\n        address operator,\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 liquidity,\\n        uint256 feeGrowthInside0LastX128,\\n        uint256 feeGrowthInside1LastX128,\\n        uint128 tokensOwed0,\\n        uint128 tokensOwed1\\n    );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n    external\\n    payable\\n    returns (\\n        uint256 tokenId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    returns (\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n}\\n\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\\n\\ninterface IUniswapV3Pool {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n    external\\n    view\\n    returns (\\n        uint160 sqrtPriceX96,\\n        int24 tick,\\n        uint16 observationIndex,\\n        uint16 observationCardinality,\\n        uint16 observationCardinalityNext,\\n        uint8 feeProtocol,\\n        bool unlocked\\n    );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n        uint128 liquidityGross,\\n        int128 liquidityNet,\\n        uint256 feeGrowthOutside0X128,\\n        uint256 feeGrowthOutside1X128,\\n        int56 tickCumulativeOutside,\\n        uint160 secondsPerLiquidityOutsideX128,\\n        uint32 secondsOutside,\\n        bool initialized\\n    );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n    external\\n    view\\n    returns (\\n        uint128 _liquidity,\\n        uint256 feeGrowthInside0LastX128,\\n        uint256 feeGrowthInside1LastX128,\\n        uint128 tokensOwed0,\\n        uint128 tokensOwed1\\n    );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n    external\\n    view\\n    returns (\\n        uint32 blockTimestamp,\\n        int56 tickCumulative,\\n        uint160 secondsPerLiquidityCumulativeX128,\\n        bool initialized\\n    );\\n\\n    function observe(uint32[] calldata secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n}\\n\\nlibrary PositionKey {\\n    /// @dev Returns the key of the position in the core library\\n    function compute(\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(owner, tickLower, tickUpper));\\n    }\\n}\\n\\nlibrary UniswapV3Library {\\n\\n    function singleSwap(\\n        ISwapRouter swapRouter,\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum\\n    ) internal returns (uint256 amountOut) {\\n\\n        IERC20(tokenIn).approve(address(swapRouter), amountIn);\\n\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: tokenIn,\\n            tokenOut: tokenOut,\\n            fee: fee,\\n            recipient: recipient,\\n            amountIn: amountIn,\\n            amountOutMinimum: amountOutMinimum,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        amountOut = swapRouter.exactInputSingle(params);\\n    }\\n\\n    function multiSwap(\\n        ISwapRouter swapRouter,\\n        address tokenIn,\\n        address tokenMid,\\n        address tokenOut,\\n        uint24 fee0,\\n        uint24 fee1,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum\\n    ) internal returns (uint256 amountOut) {\\n\\n        IERC20(tokenIn).approve(address(swapRouter), amountIn);\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: abi.encodePacked(tokenIn, fee0, tokenMid, fee1, tokenOut),\\n            recipient: recipient,\\n            amountIn: amountIn,\\n            amountOutMinimum: amountOutMinimum\\n        });\\n\\n        amountOut = swapRouter.exactInput(params);\\n    }\\n\\n}\\n\\ninterface IUniswapV3Pair {\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n                            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n}\\n\\nlibrary CallbackValidation {\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    function verifyCallback(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal view returns (IUniswapV3Pool pool) {\\n        return verifyCallback(factory, PoolKey({token0: tokenA, token1: tokenB, fee: fee}));\\n    }\\n\\n    function verifyCallback(address factory, PoolKey memory poolKey)\\n    internal\\n    view\\n    returns (IUniswapV3Pool pool)\\n    {\\n        pool = IUniswapV3Pool(IUniswapV3Factory(factory).getPool(poolKey.token0, poolKey.token1, poolKey.fee));\\n        require(msg.sender == address(pool), \\\"swap validation failed\\\");\\n    }\\n}\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\\n/// @title Returns information about the token value held in a CL NFT\\nlibrary PositionValue {\\n    struct FeeParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint128 liquidity;\\n        uint256 positionFeeGrowthInside0LastX128;\\n        uint256 positionFeeGrowthInside1LastX128;\\n        uint256 tokensOwed0;\\n        uint256 tokensOwed1;\\n    }\\n\\n    /// @notice Calculates the total fees owed to the token owner\\n    /// @param positionManager The CL NonfungiblePositionManager\\n    /// @param tokenId The tokenId of the token for which to get the total fees owed\\n    /// @return amount0 The amount of fees owed in token0\\n    /// @return amount1 The amount of fees owed in token1\\n    function fees(INonfungiblePositionManager positionManager, uint256 tokenId)\\n    internal\\n    view\\n    returns (uint256 amount0, uint256 amount1)\\n    {\\n        (\\n            ,\\n            ,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 positionFeeGrowthInside0LastX128,\\n            uint256 positionFeeGrowthInside1LastX128,\\n            uint256 tokensOwed0,\\n            uint256 tokensOwed1\\n        ) = positionManager.positions(tokenId);\\n\\n        return _fees(\\n            positionManager,\\n            FeeParams({\\n                token0: token0,\\n                token1: token1,\\n                fee: fee,\\n                tickLower: tickLower,\\n                tickUpper: tickUpper,\\n                liquidity: liquidity,\\n                positionFeeGrowthInside0LastX128: positionFeeGrowthInside0LastX128,\\n                positionFeeGrowthInside1LastX128: positionFeeGrowthInside1LastX128,\\n                tokensOwed0: tokensOwed0,\\n                tokensOwed1: tokensOwed1\\n            })\\n        );\\n    }\\n\\n    function _fees(INonfungiblePositionManager positionManager, FeeParams memory feeParams)\\n    private\\n    view\\n    returns (uint256 amount0, uint256 amount1)\\n    {\\n        amount0 = feeParams.tokensOwed0;\\n        amount1 = feeParams.tokensOwed1;\\n        (uint256 poolFeeGrowthInside0LastX128, uint256 poolFeeGrowthInside1LastX128) = _getFeeGrowthInside(\\n            IUniswapV3Pool(\\n                IUniswapV3Factory(positionManager.factory()).getPool(\\n                    feeParams.token0,\\n                    feeParams.token1,\\n                    feeParams.fee\\n                )\\n            ),\\n            feeParams.tickLower,\\n            feeParams.tickUpper\\n        );\\n        amount0 = amount0 + FullMath.mulDiv(\\n            UnsafeMath.unsafe_sub(poolFeeGrowthInside0LastX128, feeParams.positionFeeGrowthInside0LastX128),\\n            feeParams.liquidity,\\n            FixedPoint128.Q128\\n        );\\n\\n        amount1 = amount1 + FullMath.mulDiv(\\n            UnsafeMath.unsafe_sub(poolFeeGrowthInside1LastX128, feeParams.positionFeeGrowthInside1LastX128),\\n            feeParams.liquidity,\\n            FixedPoint128.Q128\\n        );\\n    }\\n\\n    function _getFeeGrowthInside(IUniswapV3Pool pool, int24 tickLower, int24 tickUpper)\\n    private\\n    view\\n    returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128)\\n    {\\n        (, int24 tickCurrent,,,,,) = pool.slot0();\\n        (,, uint256 lowerFeeGrowthOutside0X128, uint256 lowerFeeGrowthOutside1X128,,,,) = pool.ticks(tickLower);\\n        (,, uint256 upperFeeGrowthOutside0X128, uint256 upperFeeGrowthOutside1X128,,,,) = pool.ticks(tickUpper);\\n        if (tickCurrent < tickLower) {\\n            feeGrowthInside0X128 = UnsafeMath.unsafe_sub(lowerFeeGrowthOutside0X128, upperFeeGrowthOutside0X128);\\n            feeGrowthInside1X128 = UnsafeMath.unsafe_sub(lowerFeeGrowthOutside1X128, upperFeeGrowthOutside1X128);\\n        } else if (tickCurrent < tickUpper) {\\n            uint256 feeGrowthGlobal0X128 = pool.feeGrowthGlobal0X128();\\n            uint256 feeGrowthGlobal1X128 = pool.feeGrowthGlobal1X128();\\n            feeGrowthInside0X128 = UnsafeMath.unsafe_sub(UnsafeMath.unsafe_sub(feeGrowthGlobal0X128, lowerFeeGrowthOutside0X128), upperFeeGrowthOutside0X128);\\n            feeGrowthInside1X128 = UnsafeMath.unsafe_sub(UnsafeMath.unsafe_sub(feeGrowthGlobal1X128, lowerFeeGrowthOutside1X128),  upperFeeGrowthOutside1X128);\\n        } else {\\n            feeGrowthInside0X128 = UnsafeMath.unsafe_sub(upperFeeGrowthOutside0X128, lowerFeeGrowthOutside0X128);\\n            feeGrowthInside1X128 = UnsafeMath.unsafe_sub(upperFeeGrowthOutside1X128, lowerFeeGrowthOutside1X128);\\n        }\\n    }\\n}\"\n    },\n    \"contracts/Diamond.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport {LibDiamond} from \\\"./libraries/diamond/LibDiamond.sol\\\";\\nimport {LibAccessControl} from \\\"./libraries/core/LibAccessControl.sol\\\";\\nimport {IDiamondLoupe} from \\\"./interfaces/diamond/IDiamondLoupe.sol\\\";\\nimport {IDiamondCut} from \\\"./interfaces/diamond/IDiamondCut.sol\\\";\\nimport {IERC173} from \\\"./interfaces/diamond/IERC173.sol\\\";\\nimport {IERC165} from \\\"./interfaces/diamond/IERC165.sol\\\";\\nimport \\\"./interfaces/Constants.sol\\\";\\n\\ncontract Diamond {\\n\\n    constructor(address _contractOwner, address _diamondCutFacet) payable {\\n        LibAccessControl.grantRole(DEFAULT_ADMIN_ROLE, _contractOwner);\\n\\n        // Add the diamondCut external function from the diamondCutFacet\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n        facetAddress : _diamondCutFacet,\\n        action : IDiamondCut.FacetCutAction.Add,\\n        functionSelectors : functionSelectors\\n        });\\n        LibDiamond.diamondCut(cut, address(0), \\\"\\\");\\n\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        // get diamond storage\\n        assembly {\\n            ds.slot := position\\n        }\\n        // get facet from function selector\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        // Execute external function from facet using delegatecall and return any value.\\n        assembly {\\n        // copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n        // execute function call using the facet\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n        // get any return value\\n            returndatacopy(0, 0, returndatasize())\\n        // return any return value or error back to the caller\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return (0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\n    },\n    \"contracts/facets/core/AccessControlFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LibAccessControl} from \\\"../../libraries/core/LibAccessControl.sol\\\";\\n\\ncontract AccessControlFacet {\\n\\n    modifier onlyRole(bytes32 role) {\\n        LibAccessControl.checkRole(role);\\n        _;\\n    }\\n\\n    function grantRole(\\n        bytes32 role,\\n        address account\\n    ) external onlyRole(getRoleAdmin(role)) {\\n        return LibAccessControl.grantRole(role, account);\\n    }\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool) {\\n        return LibAccessControl.hasRole(role, account);\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return LibAccessControl.getRoleAdmin(role);\\n    }\\n\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) external onlyRole(getRoleAdmin(role)) {\\n        return LibAccessControl.revokeRole(role, account);\\n    }\\n}\\n\"\n    },\n    \"contracts/facets/core/MathFacet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IMasterFacet.sol\\\";\\nimport \\\"../../interfaces/Constants.sol\\\";\\nimport \\\"../../libraries/util/Math.sol\\\";\\n\\ncontract MathFacet is IMathFacet, Modifiers {\\n    \\n    function getCurrentPrice(address pair, uint32 eid) external view returns (uint256) {\\n        (uint256 dec0,) = IMasterFacet(address(this)).getPoolDecimals(pair, eid);\\n        uint160 sqrtRatioX96 = IMasterFacet(address(this)).getPoolSqrtRatioX96(pair, eid);\\n        return (FullMath.mulDiv(uint256(sqrtRatioX96) * 10 ** (dec0 + PRECISION_DEC), uint256(sqrtRatioX96), 2 ** (96 + 96)));\\n    }\\n\\n    function getTickSpacing(address pair, uint32 eid) external view returns (int24) {\\n        return IMasterFacet(address(this)).getPoolTickSpacing(pair, eid);\\n    }\\n\\n    function tickToPrice(address pair, int24 tick, uint32 eid) external view returns (uint256) {\\n        (uint256 dec0,) = IMasterFacet(address(this)).getPoolDecimals(pair, eid);\\n        uint256 dec = 10 ** (dec0 + PRECISION_DEC);\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n        return (_getPriceBySqrtRatio(sqrtRatioX96, dec));\\n    }\\n\\n    // NOTE: prices should be multiplied by 10 ** PRECISION_DEC\\n    function priceToClosestTick(address pair, uint256[] memory prices, uint32 eid) external view returns (int24[] memory) {\\n        (uint256 dec0,) = IMasterFacet(address(this)).getPoolDecimals(pair, eid);\\n        uint256 dec = 10 ** (dec0 + PRECISION_DEC);\\n        int24 tickSpacing = IMasterFacet(address(this)).getPoolTickSpacing(pair, eid);\\n\\n        int24[] memory closestTicks = new int24[](prices.length);\\n        for (uint256 i = 0; i < prices.length; i++) {\\n            uint160 sqrtRatioX96 = _getSqrtRatioByPrice(prices[i], dec);\\n            int24 currentTick = TickMath.getTickAtSqrtRatio(sqrtRatioX96);\\n            if (currentTick % tickSpacing >= 0) {\\n                closestTicks[i] = currentTick - currentTick % tickSpacing;\\n            } else {\\n                closestTicks[i] = currentTick - tickSpacing - (currentTick % tickSpacing);\\n            }\\n        }\\n        return closestTicks;\\n    }\\n    \\n    function getCurrentPoolTick(address pair, uint32 eid) external view returns (int24) {\\n        return IMasterFacet(address(this)).getPoolTick(pair, eid);\\n    }\\n\\n    function closestTicksForCurrentTick(address pair, uint32 eid) external view returns (int24 left, int24 right) {\\n        int24 tick = IMasterFacet(address(this)).getPoolTick(pair, eid);\\n        int24 tickSpacing = IMasterFacet(address(this)).getPoolTickSpacing(pair, eid);\\n        if (tick % tickSpacing >= 0) {\\n            left = tick - tick % tickSpacing;\\n            right = tick + tickSpacing - (tick % tickSpacing);\\n        } else {\\n            left = tick - tickSpacing - (tick % tickSpacing);\\n            right = tick - (tick % tickSpacing);\\n        }\\n    }\\n\\n    function _getSqrtRatioByPrice(uint256 price, uint256 decimals) internal view returns (uint160) {\\n        return SafeCast.toUint160(_sqrt(FullMath.mulDiv(price, 2 ** 192, decimals))); // NOTE: decimals = 10 ** x\\n    }\\n\\n    function _getPriceBySqrtRatio(uint160 sqrtRatio, uint256 decimals) internal view returns (uint256) {\\n        return FullMath.mulDiv(uint256(sqrtRatio), uint256(sqrtRatio) * decimals, 2 ** 192);\\n    }\\n\\n    function _sqrt(uint y) internal pure returns (uint z) {\\n        z = 0;\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function compareRatios(uint256 a, uint256 b, uint256 c, uint256 d) external pure returns (bool) {\\n        return a * d > b * c;\\n    }\\n}\\n\"\n    },\n    \"contracts/facets/core/OReadFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\nimport { Modifiers } from \\\"../../interfaces/Modifiers.sol\\\";\\nimport \\\"../../interfaces/IMasterFacet.sol\\\";\\nimport \\\"../../interfaces/core/IProportionFacet.sol\\\";\\n\\ncontract OReadFacet is IOReadFacet, OAppRead, OAppOptionsType3, Modifiers {\\n\\n    uint8 internal constant MAP_ONLY = 0;\\n    uint8 internal constant REDUCE_ONLY = 1;\\n    uint8 internal constant MAP_AND_REDUCE = 2;\\n    uint8 internal constant NONE = 3;\\n\\n    uint8 private constant READ_MSG_TYPE = 1;\\n\\n    mapping(uint32 => ChainConfig) public chainConfigs;\\n    uint32 public READ_CHANNEL;\\n\\n\\n    constructor(\\n        address _endpoint,\\n        uint32 _readChannel\\n    ) OAppRead(_endpoint, msg.sender) Ownable(msg.sender) {\\n        READ_CHANNEL = _readChannel;\\n        _setPeer(READ_CHANNEL, AddressCast.toBytes32(address(this)));\\n    }\\n\\n    function addChain(uint32 eid, ChainConfig memory chainConfig) external {\\n        chainConfigs[eid] = chainConfig;\\n    }\\n\\n    function setReadChannel(uint32 _channelId, bool _active) public override {\\n        _setPeer(_channelId, _active ? AddressCast.toBytes32(address(this)) : bytes32(0));\\n        READ_CHANNEL = _channelId;\\n    }\\n\\n    bytes public data = abi.encode(\\\"Nothing received yet.\\\");\\n\\n    function getProportion(uint32 _eid, address _pool, int24[] memory tickRange, bytes calldata _extraOptions) public payable returns (MessagingReceipt memory receipt) {\\n\\n        bytes memory cmd = getCmdData(_eid, _pool, tickRange);\\n        return\\n            _lzSend(\\n                READ_CHANNEL,\\n                cmd,\\n                combineOptions(READ_CHANNEL, READ_MSG_TYPE, _extraOptions),\\n                MessagingFee(msg.value, 0),\\n                payable(msg.sender)\\n            );\\n    }\\n\\n    function getCmdData(uint32 targetEid, address _pool, int24[] memory tickRange) public view returns (bytes memory) {\\n        EVMCallRequestV1[] memory readRequests = new EVMCallRequestV1[](1);\\n        \\n        ChainConfig memory config = chainConfigs[targetEid];\\n        \\n        address params = _pool;\\n\\n        bytes memory callData = abi.encodeWithSelector(IProportionFacet.getProportion.selector, params);\\n        readRequests[0] = EVMCallRequestV1({\\n            appRequestLabel: uint16(1),\\n            targetEid: targetEid,\\n            isBlockNum: false,\\n            blockNumOrTimestamp: uint64(block.timestamp),\\n            confirmations: config.confirmations,\\n            to: config.zapAddress,\\n            callData: callData\\n        });\\n        \\n\\n        EVMCallComputeV1 memory computeSettings = EVMCallComputeV1({\\n            computeSetting: NONE, // lzMap() and lzReduce()\\n            targetEid: ILayerZeroEndpointV2(endpoint).eid(),\\n            isBlockNum: false,\\n            blockNumOrTimestamp: uint64(block.timestamp),\\n            confirmations: 15,\\n            to: address(this)\\n        });\\n\\n        return ReadCodecV1.encode(0, readRequests, computeSettings);\\n    }\\n\\n    // hardcode NOT to pay in ZRO\\n    function quoteCmdData(uint32 targetEid, address _pool, int24[] memory tickRange, bytes calldata _extraOptions) external view returns (MessagingFee memory fee) {\\n        bytes memory cmd = getCmdData(targetEid, _pool, tickRange);\\n        return _quote(READ_CHANNEL, cmd, combineOptions(READ_CHANNEL, READ_MSG_TYPE, _extraOptions), false);\\n    }\\n\\n\\n    function _lzReceive(\\n        Origin calldata,\\n        bytes32 /*_guid*/,\\n        bytes calldata _message,\\n        address,\\n        bytes calldata\\n    ) internal override {\\n        require(_message.length == 32, \\\"Invalid message length\\\");\\n        // (amount, shares) = abi.decode(_message, (uint128, uint128));\\n        \\n    }\\n}\"\n    },\n    \"contracts/facets/core/ProportionFacet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IMasterFacet.sol\\\";\\nimport \\\"../../interfaces/Modifiers.sol\\\";\\nimport \\\"../../interfaces/Constants.sol\\\";\\nimport { TickMath, LiquidityAmounts } from \\\"../../libraries/util/Math.sol\\\";\\n\\ncontract ProportionFacet is IProportionFacet, Modifiers {\\n\\n    function getProportion(\\n        address pair,\\n        int24[] memory tickRange,\\n        uint32 _eid\\n    ) public view returns (uint256 token0Amount, uint256 token1Amount) {\\n        (uint256 decimals0, uint256 decimals1) = IMasterFacet(address(this)).getPoolDecimals(pair, _eid);\\n        uint256 dec0 = 10 ** decimals0;\\n        uint256 dec1 = 10 ** decimals1;\\n        uint160 sqrtRatioX96 = IMasterFacet(address(this)).getPoolSqrtRatioX96(pair, _eid);\\n\\n        uint160 sqrtRatio0 = TickMath.getSqrtRatioAtTick(tickRange[0]);\\n        uint160 sqrtRatio1 = TickMath.getSqrtRatioAtTick(tickRange[1]);\\n        uint128 liquidity = LiquidityAmounts.getLiquidityForAmounts(sqrtRatioX96, sqrtRatio0, sqrtRatio1, dec0 * 1000, dec1 * 1000);\\n        (token0Amount, token1Amount) = LiquidityAmounts.getAmountsForLiquidity(sqrtRatioX96, sqrtRatio0, sqrtRatio1, liquidity);\\n        uint256 denominator = dec0 > dec1 ? dec0 : dec1;\\n\\n        token0Amount = token0Amount * (denominator / dec0);\\n        token1Amount = token1Amount * (denominator / dec1);\\n    }\\n}\\n\"\n    },\n    \"contracts/facets/core/ZapFacet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IMasterFacet.sol\\\";\\n\\ncontract ZapFacet is IZapFacet, Modifiers {\\n\\n    bytes32 internal constant ZAP_STORAGE_POSITION = keccak256(\\\"zap.storage\\\");\\n\\n    function zapStorage() internal pure returns (ZapStorage storage ds) {\\n        bytes32 position = ZAP_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function setZapParams(ZapStorage memory args) external onlyAdmin {\\n        require(args.inchRouter != address(0), 'inchRouter is empty');\\n        require(args.binSearchIterations != 0, 'binSearchIterations is empty');\\n        \\n        zapStorage().inchRouter = args.inchRouter;\\n        zapStorage().binSearchIterations = args.binSearchIterations;\\n        zapStorage().remainingLiquidityThreshold = args.remainingLiquidityThreshold;\\n    }\\n\\n    function inchRouter() public view returns (address) {\\n        return zapStorage().inchRouter;\\n    }\\n\\n    function remainingLiquidityThreshold() public view returns (uint256) {\\n        return zapStorage().remainingLiquidityThreshold;\\n    }\\n\\n    function zapIn(SwapData memory swapData, ZapInParams memory paramsData) external {\\n        _zapIn(swapData, paramsData, true, 0);\\n    }\\n\\n    function zapOut(uint256 tokenId) external {\\n        _zapOut(tokenId, msg.sender, msg.sender);\\n    }\\n\\n    struct PoolTokens {\\n        address[] token;\\n        IERC20[] asset;\\n        uint256[] amount;\\n    }\\n\\n    struct TokenAmounts {\\n        address[] tokens;\\n        uint256[] initial;\\n        uint256[] put;\\n        uint256[] returned;\\n    }\\n\\n    function _zapIn(\\n        SwapData memory swapData,\\n        ZapInParams memory paramsData,\\n        bool needTransfer,\\n        uint256 tokenId\\n    ) internal {\\n        validateInputs(swapData, paramsData);\\n        for (uint256 i = 0; i < swapData.inputs.length; i++) {\\n            IERC20 asset = IERC20(swapData.inputs[i].tokenAddress);\\n            if (needTransfer) {\\n                asset.transferFrom(msg.sender, address(this), swapData.inputs[i].amountIn);\\n            }\\n            asset.approve(zapStorage().inchRouter, swapData.inputs[i].amountIn);\\n        }\\n        swap1Inch(swapData);\\n        PoolTokens memory poolTokens = PoolTokens({\\n            token: new address[](2),\\n            asset: new IERC20[](2),\\n            amount: new uint256[](2)\\n        });\\n        TokenAmounts memory tokenAmounts = TokenAmounts({\\n            tokens: new address[](2),\\n            initial: new uint256[](2),\\n            put: new uint256[](2),\\n            returned: new uint256[](2)\\n        });\\n        (poolTokens.token[0], poolTokens.token[1]) = IMasterFacet(address(this)).getPoolTokens(paramsData.pool, IProtocolFacet(address(this)).eid());\\n        tokenAmounts.tokens = poolTokens.token;\\n        for (uint256 i = 0; i < 2; i++) {\\n            poolTokens.asset[i] = IERC20(poolTokens.token[i]);\\n            if (needTransfer && paramsData.amountsOut[i] > 0) {\\n                poolTokens.asset[i].transferFrom(msg.sender, address(this), paramsData.amountsOut[i]);\\n            }\\n            poolTokens.amount[i] = poolTokens.asset[i].balanceOf(address(this));\\n            paramsData.amountsOut[i] = poolTokens.amount[i];\\n        }\\n        tokenAmounts.initial = poolTokens.amount;\\n        uint256[] memory positionAmounts = new uint256[](2);\\n        uint256[] memory newPositionAmounts = new uint256[](2);\\n        if (tokenId != 0) {\\n            (positionAmounts[0], positionAmounts[1]) = IMasterFacet(address(this)).getPositionAmounts(tokenId, IProtocolFacet(address(this)).eid());\\n        }\\n        tokenId = manageLiquidity(paramsData, poolTokens, tokenId);\\n        adjustSwap(paramsData, poolTokens, tokenId);\\n        (newPositionAmounts[0], newPositionAmounts[1]) = IMasterFacet(address(this)).getPositionAmounts(tokenId, IProtocolFacet(address(this)).eid());\\n\\n        for (uint256 i = 0; i < 2; i++) {\\n            if (newPositionAmounts[i] > positionAmounts[i]) {\\n                tokenAmounts.put[i] = newPositionAmounts[i] - positionAmounts[i];\\n            }\\n            tokenAmounts.returned[i] = poolTokens.asset[i].balanceOf(address(this));\\n            if (tokenAmounts.returned[i] > 0) {\\n                poolTokens.asset[i].transfer(msg.sender, tokenAmounts.returned[i]);\\n            }\\n        }\\n        for (uint256 i = 0; i < swapData.inputs.length; i++) {\\n            IERC20 asset = IERC20(swapData.inputs[i].tokenAddress);\\n            uint256 balance = asset.balanceOf(address(this));\\n            if (balance > 0) {\\n                asset.transfer(msg.sender, balance);\\n            }\\n        }\\n        if (!paramsData.isSimulation) {\\n            emit ZapResult(tokenAmounts.tokens, tokenAmounts.initial, tokenAmounts.put, tokenAmounts.returned);\\n        } else {\\n            revert SimulationResult(\\n                tokenAmounts.tokens, \\n                tokenAmounts.initial, \\n                tokenAmounts.put, \\n                tokenAmounts.returned, \\n                paramsData.adjustSwapAmount, \\n                paramsData.adjustSwapSide\\n            );\\n        }\\n    }\\n\\n    function _zapOut(uint256 tokenId, address recipient, address feeRecipient) internal {\\n        // IMasterFacet(address(this)).isOwner(tokenId, msg.sender);\\n        IMasterFacet(address(this)).closePosition(tokenId, recipient, feeRecipient);\\n    }\\n\\n    function validateInputs(SwapData memory swapData, ZapInParams memory paramsData) internal view {\\n        for (uint256 i = 0; i < swapData.inputs.length; i++) {\\n            for (uint256 j = 0; j < i; j++) {\\n                require(\\n                    swapData.inputs[i].tokenAddress != swapData.inputs[j].tokenAddress,\\n                    \\\"Duplicate input tokens\\\"\\n                );\\n            }\\n            require(swapData.inputs[i].amountIn > 0, \\\"Input amount is 0\\\");\\n        }\\n\\n        require(paramsData.amountsOut.length == 2, \\\"Invalid output length, must be exactly 2\\\");\\n        require(paramsData.tickRange.length == 2, \\\"Invalid tick range length, must be exactly 2\\\");\\n        require(paramsData.tickRange[0] < paramsData.tickRange[1], \\\"Invalid tick range\\\");\\n    }\\n\\n    function swap1Inch(SwapData memory swapData) internal {\\n        for (uint256 i = 0; i < swapData.data.length; i++) {\\n            (bool success,) = zapStorage().inchRouter.call{value : 0}(swapData.data[i]);\\n            require(success, \\\"router swap invalid\\\");\\n        }\\n\\n        {\\n            address[] memory tokensIn = new address[](swapData.inputs.length);\\n            uint256[] memory amountsIn = new uint256[](swapData.inputs.length);\\n            for (uint256 i = 0; i < swapData.inputs.length; i++) {\\n                tokensIn[i] = swapData.inputs[i].tokenAddress;\\n                amountsIn[i] = swapData.inputs[i].amountIn;\\n            }\\n            emit InputTokens(tokensIn, amountsIn);\\n        }\\n        {\\n            address[] memory tokensOut = new address[](swapData.outputs.length);\\n            uint256[] memory amountsOut = new uint256[](swapData.outputs.length);\\n            for (uint256 i = 0; i < swapData.outputs.length; i++) {\\n                tokensOut[i] = swapData.outputs[i].tokenAddress;\\n                amountsOut[i] = IERC20(tokensOut[i]).balanceOf(address(this));\\n            }\\n            emit OutputTokens(tokensOut, amountsOut);\\n        }\\n    }\\n\\n    function manageLiquidity(ZapInParams memory paramsData, PoolTokens memory poolTokens, uint256 tokenId) internal returns (uint256) {\\n        poolTokens.asset[0].approve(IProtocolFacet(address(this)).npm(), poolTokens.amount[0]);\\n        poolTokens.asset[1].approve(IProtocolFacet(address(this)).npm(), poolTokens.amount[1]);\\n\\n        if (tokenId == 0) {\\n            tokenId = IMasterFacet(address(this)).mintPosition(\\n                paramsData.pool,\\n                paramsData.tickRange[0],\\n                paramsData.tickRange[1],\\n                poolTokens.amount[0],\\n                poolTokens.amount[1],\\n                msg.sender\\n            );\\n            emit TokenId(tokenId);\\n        } else {\\n            IMasterFacet(address(this)).increaseLiquidity(tokenId, poolTokens.amount[0], poolTokens.amount[1]);\\n        }\\n        return tokenId;\\n    }\\n\\n    function adjustSwap(\\n        ZapInParams memory paramsData,\\n        PoolTokens memory poolTokens,\\n        uint256 tokenId\\n    ) internal {\\n        if (paramsData.isSimulation) {\\n            (paramsData.adjustSwapAmount, paramsData.adjustSwapSide) = simulateSwap(paramsData, poolTokens);\\n        }\\n        if (paramsData.adjustSwapAmount > 0) {\\n            IMasterFacet(address(this)).swap(paramsData.pool, paramsData.adjustSwapAmount, 0, paramsData.adjustSwapSide);\\n        }\\n        paramsData.amountsOut[0] = poolTokens.asset[0].balanceOf(address(this));\\n        paramsData.amountsOut[1] = poolTokens.asset[1].balanceOf(address(this));\\n        poolTokens.asset[0].approve(IProtocolFacet(address(this)).npm(), paramsData.amountsOut[0]);\\n        poolTokens.asset[1].approve(IProtocolFacet(address(this)).npm(), paramsData.amountsOut[1]);\\n\\n        IMasterFacet(address(this)).increaseLiquidity(tokenId, paramsData.amountsOut[0], paramsData.amountsOut[1]);\\n    }\\n\\n    struct BinSearchParams {\\n        uint256 left;\\n        uint256 right;\\n        uint256 mid;\\n    }\\n\\n    function simulateSwap(\\n        ZapInParams memory paramsData, \\n        PoolTokens memory poolTokens\\n    ) internal returns (uint256 amountToSwap, bool zeroForOne) {\\n        zeroForOne = poolTokens.asset[0].balanceOf(address(this)) > poolTokens.asset[1].balanceOf(address(this));\\n        BinSearchParams memory binSearchParams;\\n        binSearchParams.right = poolTokens.asset[zeroForOne ? 0 : 1].balanceOf(address(this));\\n        for (uint256 i = 0; i < zapStorage().binSearchIterations; i++) {\\n            binSearchParams.mid = (binSearchParams.left + binSearchParams.right) / 2;\\n\\n            try IMasterFacet(address(this)).simulateSwap(\\n                paramsData.pool, \\n                binSearchParams.mid, \\n                0, \\n                zeroForOne, \\n                paramsData.tickRange\\n            ) \\n            {} catch (bytes memory _data) {\\n                bytes memory data;\\n                assembly {\\n                    data := add(_data, 4)\\n                }\\n                uint256[] memory swapResult = new uint256[](4);\\n                (swapResult[0], swapResult[1], swapResult[2], swapResult[3]) = abi.decode(data, (uint256, uint256, uint256, uint256));\\n                bool compareResult = zeroForOne ? \\n                    IMasterFacet(address(this)).compareRatios(swapResult[0], swapResult[1], swapResult[2], swapResult[3]) : \\n                    IMasterFacet(address(this)).compareRatios(swapResult[1], swapResult[0], swapResult[3], swapResult[2]);\\n                if (compareResult) {\\n                    binSearchParams.left = binSearchParams.mid;\\n                } else {\\n                    binSearchParams.right = binSearchParams.mid;\\n                }\\n            }\\n        }\\n        amountToSwap = binSearchParams.mid;\\n    }\\n}\"\n    },\n    \"contracts/facets/diamond/DiamondCutFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { IDiamondCut } from \\\"../../interfaces/diamond/IDiamondCut.sol\\\";\\nimport { LibDiamond } from \\\"../../libraries/diamond/LibDiamond.sol\\\";\\nimport \\\"../../interfaces/Modifiers.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\ncontract DiamondCutFacet is IDiamondCut, Modifiers {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override onlyAdmin {\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\"\n    },\n    \"contracts/facets/diamond/DiamondCutLoupe.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { LibDiamond } from  \\\"../../libraries/diamond/LibDiamond.sol\\\";\\nimport { IDiamondLoupe } from \\\"../../interfaces/diamond/IDiamondLoupe.sol\\\";\\nimport { IERC165 } from \\\"../../interfaces/diamond/IERC165.sol\\\";\\n\\n// The functions in DiamondLoupeFacet MUST be added to a diamond.\\n// The EIP-2535 Diamond standard requires these functions.\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently by tools.\\n    //\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external override view returns (Facet[] memory facets_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 numFacets = ds.facetAddresses.length;\\n        facets_ = new Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress_ = ds.facetAddresses[i];\\n            facets_[i].facetAddress = facetAddress_;\\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory facetFunctionSelectors_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddresses_ = ds.facetAddresses;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\"\n    },\n    \"contracts/facets/protocol/UniswapV3Facet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../connectors/UniswapV3.sol\\\";\\nimport \\\"../../interfaces/IMasterFacet.sol\\\";\\nimport \\\"../../interfaces/Modifiers.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract UniswapV3Facet is IProtocolFacet, Modifiers {\\n\\n    bytes32 internal constant PROTOCOL_STORAGE_POSITION = keccak256(\\\"protocol.storage\\\");\\n\\n    struct SwapCallbackData {\\n        address tokenA;\\n        address tokenB;\\n        uint24 fee;\\n    }\\n    \\n    function protocolStorage() internal pure returns (ProtocolStorage storage ds) {\\n        bytes32 position = PROTOCOL_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function setProtocolParams(ProtocolStorage memory args) external onlyAdmin {\\n        require(args.npm != address(0), 'npm is empty');\\n        require(args.eid != 0, 'eid is empty');\\n        protocolStorage().npm = args.npm;\\n        protocolStorage().eid = args.eid;\\n    }\\n\\n    function npm() public view returns (address) {\\n        return protocolStorage().npm;\\n    }\\n\\n    function eid() public view returns (uint32) {\\n        return protocolStorage().eid;\\n    }\\n\\n    function mintPosition(\\n        address pair,\\n        int24 tickRange0,\\n        int24 tickRange1,\\n        uint256 amountOut0,\\n        uint256 amountOut1,\\n        address recipient\\n    ) external onlyDiamond returns (uint256 tokenId) {\\n        IUniswapV3Pool pool = IUniswapV3Pool(pair);\\n        INonfungiblePositionManager.MintParams memory params = INonfungiblePositionManager.MintParams({\\n            token0: pool.token0(),\\n            token1: pool.token1(),\\n            fee: pool.fee(),\\n            tickLower: tickRange0,\\n            tickUpper: tickRange1,\\n            amount0Desired: amountOut0,\\n            amount1Desired: amountOut1,\\n            amount0Min: 0,\\n            amount1Min: 0,\\n            recipient: recipient,\\n            deadline: block.timestamp\\n        });\\n        (tokenId,,,) = _getNpmInstance().mint(params);\\n    }\\n\\n    function closePosition(uint256 tokenId, address recipient, address feeRecipient) onlyDiamond external {\\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params = INonfungiblePositionManager.DecreaseLiquidityParams({\\n            tokenId: tokenId,\\n            liquidity: getLiquidity(tokenId),\\n            amount0Min: 0,\\n            amount1Min: 0,\\n            deadline: block.timestamp\\n        });\\n        (uint256 fee0, uint256 fee1) = _collectRewards(tokenId, feeRecipient);\\n        emit CollectRewards(fee0, fee1);\\n        if (params.liquidity > 0) {\\n            _getNpmInstance().decreaseLiquidity(params);\\n        }\\n        _collectRewards(tokenId, recipient);\\n        _getNpmInstance().burn(tokenId);\\n    }\\n\\n    function increaseLiquidity(\\n        uint256 tokenId,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external onlyDiamond returns (uint128 liquidity) {\\n        INonfungiblePositionManager.IncreaseLiquidityParams memory params = INonfungiblePositionManager.IncreaseLiquidityParams({\\n            tokenId: tokenId,\\n            amount0Desired: amount0,\\n            amount1Desired: amount1,\\n            amount0Min: 0,\\n            amount1Min: 0,\\n            deadline: block.timestamp\\n        });\\n        (liquidity,,) = _getNpmInstance().increaseLiquidity(params);\\n    }\\n\\n    function swap(\\n        address pair,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96,\\n        bool zeroForOne\\n    ) public onlyDiamond {\\n        IUniswapV3Pool pool = IUniswapV3Pool(pair);\\n        SwapCallbackData memory data = SwapCallbackData({\\n            tokenA: pool.token0(),\\n            tokenB: pool.token1(),\\n            fee: pool.fee()\\n        });\\n \\n        pool.swap(\\n            address(this), \\n            zeroForOne, \\n            int256(amountIn), \\n            sqrtPriceLimitX96 == 0\\n                ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\\n                : sqrtPriceLimitX96, \\n            abi.encode(data)\\n        );\\n    }\\n \\n    function simulateSwap(\\n        address pair,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96,\\n        bool zeroForOne,\\n        int24[] memory tickRange\\n    ) external onlyDiamond {\\n        (address token0Address, address token1Address) = getPoolTokens(pair, eid());\\n        swap(pair, amountIn, sqrtPriceLimitX96, zeroForOne);\\n \\n        uint256[] memory ratio = new uint256[](2);\\n        (ratio[0], ratio[1]) = IMasterFacet(address(this)).getProportion(pair, tickRange, eid());\\n        revert SwapError(\\n            IERC20(token0Address).balanceOf(address(this)),\\n            IERC20(token1Address).balanceOf(address(this)),\\n            ratio[0],\\n            ratio[1]\\n        );\\n    }\\n \\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata _data\\n    ) external {\\n        SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));\\n        address factory = _getNpmInstance().factory();\\n        CallbackValidation.verifyCallback(factory, data.tokenA, data.tokenB, data.fee);\\n \\n        (bool isExactInput, uint256 amountToPay) =\\n            amount0Delta > 0\\n                ? (data.tokenA < data.tokenB, uint256(amount0Delta))\\n                : (data.tokenB < data.tokenA, uint256(amount1Delta));\\n \\n        if (isExactInput) {\\n            IERC20(data.tokenA).transfer(msg.sender, amountToPay);\\n        } else {\\n            IERC20(data.tokenB).transfer(msg.sender, amountToPay);\\n        }\\n    }\\n\\n    function _collectRewards(uint256 tokenId, address recipient) internal returns (uint256, uint256) {\\n        INonfungiblePositionManager.CollectParams memory collectParams = INonfungiblePositionManager.CollectParams({\\n            tokenId: tokenId,\\n            recipient: recipient,\\n            amount0Max: type(uint128).max,\\n            amount1Max: type(uint128).max\\n        });\\n        return _getNpmInstance().collect(collectParams);\\n    }\\n\\n    function getPoolData(address pair) external view returns (PoolData memory poolData) {\\n        IUniswapV3Pool pool = IUniswapV3Pool(pair);\\n        (uint160 _sqrtRatioX96, int24 tick,,,,,) = pool.slot0();\\n        int24 ts = pool.tickSpacing();\\n\\n        poolData = PoolData({\\n            token0: pool.token0(),\\n            token1: pool.token1(),\\n            sqrtPriceX96: _sqrtRatioX96,\\n            currentTick: tick,\\n            tickSpacing: ts\\n        });\\n    }\\n\\n    function getPoolDecimals(address pair, uint32 _eid) external onlyDiamond view returns (uint256, uint256) {\\n        if (_eid == eid()) {\\n            IUniswapV3Pool pool = IUniswapV3Pool(pair);\\n            return (IERC20Metadata(pool.token0()).decimals(), IERC20Metadata(pool.token1()).decimals());\\n        } else {\\n            // IMasterFacet(address(this)).\\n        }\\n    }\\n\\n    function getPoolSqrtRatioX96(address pair, uint32 _eid) external onlyDiamond view returns (uint160 sqrtRatioX96) {\\n        (sqrtRatioX96,,,,,,) = IUniswapV3Pool(pair).slot0();\\n    }\\n\\n    function getPoolTickSpacing(address pair, uint32 _eid) external onlyDiamond view returns (int24) {\\n        return IUniswapV3Pool(pair).tickSpacing();\\n    }\\n\\n    function getPoolTick(address pair, uint32 _eid) external onlyDiamond view returns (int24 tick) {\\n        (, tick,,,,,) = IUniswapV3Pool(pair).slot0();\\n    }\\n\\n    function getPoolTokens(address pair, uint32 _eid) public view returns (address, address) {\\n        IUniswapV3Pool pool = IUniswapV3Pool(pair);\\n        return (pool.token0(), pool.token1());\\n    }\\n\\n    function getPositionAmounts(uint256 tokenId, uint32 _eid) public view returns (uint256 amount0, uint256 amount1) {\\n        address poolId = getPool(tokenId, _eid);\\n        (int24 tickLower, int24 tickUpper) = getPositionTicks(tokenId, _eid);\\n        (uint160 sqrtRatioX96,,,,,,) = IUniswapV3Pool(poolId).slot0();\\n        (amount0, amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n            sqrtRatioX96,\\n            TickMath.getSqrtRatioAtTick(tickLower),\\n            TickMath.getSqrtRatioAtTick(tickUpper),\\n            getLiquidity(tokenId)\\n        );\\n    }\\n\\n    function getPositionTokens(uint256 tokenId) public view returns (address token0, address token1) {\\n        (,, token0, token1,,,,,,,,) = _getNpmInstance().positions(tokenId);\\n    }\\n\\n    function getPool(uint256 tokenId, uint32 _eid) public view returns (address poolId) {\\n        (address token0, address token1) = getPositionTokens(tokenId);\\n        (,,,, uint24 fee,,,,,,,) = _getNpmInstance().positions(tokenId);\\n        IUniswapV3Factory factory = IUniswapV3Factory(_getNpmInstance().factory());\\n        poolId = factory.getPool(token0, token1, fee);\\n    }\\n\\n    function getPositionTicks(uint256 tokenId, uint32 _eid) public view returns (int24 tickLower, int24 tickUpper) {\\n        (,,,,, tickLower, tickUpper,,,,,) = _getNpmInstance().positions(tokenId);\\n    }\\n\\n    function getLiquidity(uint256 tokenId) internal view returns (uint128 liquidity) {\\n        (,,,,,,, liquidity,,,,) = _getNpmInstance().positions(tokenId);\\n    }\\n\\n    function _getTickSpacing(uint256 tokenId) internal view returns (int24 tickSpacing) {\\n        IUniswapV3Pool pool = IUniswapV3Pool(getPool(tokenId, eid()));\\n        tickSpacing = pool.tickSpacing();\\n    }\\n\\n    function _getNpmInstance() internal view returns (INonfungiblePositionManager) {\\n        return INonfungiblePositionManager(protocolStorage().npm);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/Constants.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\nuint256 constant MAX_UINT_VALUE = type(uint256).max;\\nuint256 constant PRECISION_DEC = 18; // constant for more precise returns\\n\\n// layer0 constants\\n\\nuint32 constant ETH_EID = 30101; // LayerZero EID for Ethereum Mainnet\\n// address constant ETH_ZAP = 0x0; // add actual address\\n\\nuint32 constant BASE_EID = 30184; // LayerZero EID for Base Mainnet\\n// address constant BASE_ZAP = 0x0; // add actual address\\n\\nuint32 constant OPT_EID = 30111; // LayerZero EID for Optimism Mainnet\\n// address constant OPT_ZAP = 0x0; // add actual address\\n\"\n    },\n    \"contracts/interfaces/core/IMathFacet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title IMathFacet\\n/// @notice Interface for mathematical operations related to liquidity pools\\n/// @dev This interface defines functions for price calculations, tick conversions, and ratio comparisons\\ninterface IMathFacet {\\n\\n    /// @notice Get the current price of a liquidity pool\\n    /// @param pair The address of the liquidity pool\\n    /// @return The current price as a uint256\\n    function getCurrentPrice(address pair, uint32 eid) external view returns (uint256);\\n\\n    /// @notice Get the tick spacing for a given liquidity pool\\n    /// @param pair The address of the liquidity pool\\n    /// @return The tick spacing as an int24\\n    function getTickSpacing(address pair, uint32 eid) external view returns (int24);\\n\\n    /// @notice Convert a tick to its corresponding price\\n    /// @param pair The address of the liquidity pool\\n    /// @param tick The tick to convert\\n    /// @return The price corresponding to the given tick as a uint256\\n    function tickToPrice(address pair, int24 tick, uint32 eid) external view returns (uint256);\\n\\n    /// @notice Convert prices to their closest ticks\\n    /// @param pair The address of the liquidity pool\\n    /// @param prices An array of prices to convert\\n    /// @return An array of the closest ticks corresponding to the given prices\\n    function priceToClosestTick(address pair, uint256[] memory prices, uint32 eid) external view returns (int24[] memory);\\n\\n    /// @notice Get the current tick of a liquidity pool\\n    /// @param pair The address of the liquidity pool\\n    /// @return tick The current tick of the pool as an int24\\n    function getCurrentPoolTick(address pair, uint32 eid) external view returns (int24 tick);\\n\\n    /// @notice Get the closest ticks (such as left <= current tick < right) to the current tick of a liquidity pool\\n    /// @param pair The address of the liquidity pool\\n    /// @return left The closest tick to the left of the current tick\\n    /// @return right The closest tick to the right of the current tick\\n    function closestTicksForCurrentTick(address pair, uint32 eid) external view returns (int24 left, int24 right);\\n\\n    /// @notice Compare two ratios\\n    /// @param a Numerator of the first ratio\\n    /// @param b Denominator of the first ratio\\n    /// @param c Numerator of the second ratio\\n    /// @param d Denominator of the second ratio\\n    /// @return True if a/b > c/d, false otherwise\\n    function compareRatios(uint256 a, uint256 b, uint256 c, uint256 d) external pure returns (bool);\\n}\\n\"\n    },\n    \"contracts/interfaces/core/IOReadFacet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport { ILayerZeroEndpointV2, MessagingFee, MessagingReceipt, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { AddressCast } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\n\\nimport { ReadCodecV1, EVMCallComputeV1, EVMCallRequestV1 } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/ReadCodecV1.sol\\\";\\nimport { OAppOptionsType3 } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\nimport { OAppRead } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppRead.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IOReadFacet {\\n\\n    struct EvmReadRequest {\\n        uint16 appRequestLabel;\\n        uint32 targetEid;\\n        bool isBlockNum;\\n        uint64 blockNumOrTimestamp;\\n        uint16 confirmations;\\n        address to;\\n    }\\n\\n    struct EvmComputeRequest {\\n        uint8 computeSetting;\\n        uint32 targetEid;\\n        bool isBlockNum;\\n        uint64 blockNumOrTimestamp;\\n        uint16 confirmations;\\n        address to;\\n    }\\n\\n    struct ChainConfig {\\n        uint16 confirmations; // Number of confirmations required\\n        address zapAddress; // Address of the zap contract\\n        // address poolAddress; // Address of the pool contract\\n    }\\n\\n    function getProportion(uint32 _eid, address _pool, int24[] memory tickRange, bytes calldata _extraOptions) external payable returns (MessagingReceipt memory receipt);\\n\\n    \\n}\"\n    },\n    \"contracts/interfaces/core/IProportionFacet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title IProportionFacet Interface\\n/// @notice Interface for the ProportionFacet which computes token ratios in a liquidity pool\\ninterface IProportionFacet {\\n    /// @notice Struct representing an input token for a swap\\n    /// @param tokenAddress The address of the token\\n    /// @param amount The amount of the token\\n    /// @param price The price of the token in USD * 10^18\\n    struct InputSwapToken {\\n        address tokenAddress;\\n        uint256 amount;\\n        uint256 price;\\n    }\\n\\n    /// @notice Calculates the proportion for a given pool and tick range\\n    /// @param pair The address of the token pool\\n    /// @param tickRange The range of position in ticks\\n    /// @return The proportion of the pool in abstract measurements\\n    function getProportion(\\n        address pair,\\n        int24[] memory tickRange,\\n        uint32 _eid\\n    ) external view returns (uint256, uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/core/IZapFacet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title IZapFacet\\n/// @notice Interface for the ZapFacet contract, which handles various liquidity management operations\\n/// @dev This interface defines the structures and functions for zapping in/out, rebalancing, increasing, and merging liquidity positions\\ninterface IZapFacet {\\n\\n    /// @notice Structure for zap storage\\n    /// @param inchRouter The address of the 1inch router\\n    /// @param binSearchIterations The number of iterations for the secondary swap bin search\\n    /// @param remainingLiquidityThreshold The remaining liquidity threshold, if sum of token0 and token1 after first increase is more than this, the swap will be adjusted\\n    struct ZapStorage {\\n        address inchRouter;\\n        uint256 binSearchIterations;\\n        uint256 remainingLiquidityThreshold;\\n    }\\n\\n    /// @notice Emitted after swap\\n    /// @param tokens Array of input token addresses\\n    /// @param amounts Array of input token amounts\\n    event InputTokens(address[] tokens, uint256[] amounts);\\n\\n    /// @notice Emitted after swap\\n    /// @param tokens Array of output token addresses\\n    /// @param amounts Array of output token amounts\\n    event OutputTokens(address[] tokens, uint256[] amounts);\\n\\n    /// @notice Emitted with the result of a zap operation\\n    /// @param tokens Array of pool token addresses\\n    /// @param initialAmounts Amounts of tokens after swap\\n    /// @param putAmounts Amounts of tokens put into the pool\\n    /// @param returnedAmounts Amounts of tokens returned to the user\\n    event ZapResult(\\n        address[] tokens, \\n        uint256[] initialAmounts, \\n        uint256[] putAmounts, \\n        uint256[] returnedAmounts\\n    );\\n\\n    /// @notice Emitted when a new token ID is generated\\n    /// @param tokenId The ID of the token\\n    event TokenId(uint256 tokenId);\\n\\n    /// @notice Error thrown with the simulation result of a zap operation\\n    /// @param tokens Array of pool token addresses\\n    /// @param initialAmounts Amounts of tokens after swap\\n    /// @param putAmounts Amounts of tokens put into the pool\\n    /// @param returnedAmounts Amounts of tokens returned to the user\\n    /// @param amountToSwap Amount of tokens needed to be swapped secondarily\\n    /// @param swapSide Flag indicating if swap token0 to token1 or vice versa\\n    error SimulationResult(\\n        address[] tokens, \\n        uint256[] initialAmounts, \\n        uint256[] putAmounts, \\n        uint256[] returnedAmounts,\\n        uint256 amountToSwap,\\n        bool swapSide\\n    );\\n\\n    /// @notice Structure for input token information\\n    /// @param tokenAddress The address of the input token\\n    /// @param amountIn The amount of tokens to input\\n    struct InputToken {\\n        address tokenAddress;\\n        uint256 amountIn;\\n    }\\n\\n    /// @notice Structure for pool's tokens information\\n    /// @param tokenAddress The address of the token\\n    /// @param amountMin The minimum amount of tokens after the swap\\n    struct OutputToken {\\n        address tokenAddress;\\n        uint256 amountMin;\\n    }\\n\\n    /// @notice Structure containing swap data\\n    /// @param inputs An array of input tokens\\n    /// @param outputs An array of output tokens\\n    /// @param data router data\\n    struct SwapData {\\n        InputToken[] inputs;\\n        OutputToken[] outputs;\\n        bytes[] data;\\n    }\\n\\n    /// @notice Parameters for zapping in\\n    /// @param pool The address of the liquidity pool\\n    /// @param tickRange An array of tick ranges for the position\\n    /// @param amountsOut An array of token amounts come directly from the user\\n    /// @param isSimulation A flag indicating whether this is a zap simulation\\n    /// @param adjustSwapSide Flag indicating if swap token0 to token1 or vice versa\\n    /// @param adjustSwapAmount The amount of secondary swap\\n    struct ZapInParams {\\n        address pool;\\n        int24[] tickRange;\\n        uint256[] amountsOut;\\n\\n        bool isSimulation;\\n        bool adjustSwapSide;\\n        uint256 adjustSwapAmount;\\n    }\\n\\n    /// @notice Zaps in to a liquidity position\\n    /// @param swapData The swap data for the zap\\n    /// @param paramsData The parameters for the zap\\n    function zapIn(SwapData memory swapData, ZapInParams memory paramsData) external;\\n\\n    /// @notice Zaps out of a liquidity position\\n    /// @param tokenId The ID of the token to zap out of\\n    function zapOut(uint256 tokenId) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/diamond/IDiamondCut.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\n    },\n    \"contracts/interfaces/diamond/IDiamondLoupe.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\n    },\n    \"contracts/interfaces/diamond/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/interfaces/diamond/IERC173.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IMasterFacet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./core/IMathFacet.sol\\\";\\nimport \\\"./core/IOReadFacet.sol\\\";\\nimport \\\"./core/IProportionFacet.sol\\\";\\nimport \\\"./core/IZapFacet.sol\\\";\\nimport \\\"./IProtocolFacet.sol\\\";\\nimport \\\"./Modifiers.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// interface IMasterFacet is IMathFacet, IOReadFacet, IProtocolFacet, IProportionFacet, IZapFacet {}\\ninterface IMasterFacet is IMathFacet, IProtocolFacet, IProportionFacet, IZapFacet {}\\n\"\n    },\n    \"contracts/interfaces/IProtocolFacet.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title IProtocolFacet\\n * @dev Interface for the Protocol Facet\\n * This interface defines the structure and functions for managing liquidity positions\\n * in a DEX environment.\\n */\\ninterface IProtocolFacet {\\n\\n    event CollectRewards(uint256 fee0, uint256 fee1);\\n\\n    /// @notice Structure for protocol storage\\n    /// @param npm The address of the non-fungible position manager\\n    struct ProtocolStorage {\\n        address npm;\\n        uint32 eid;\\n    }\\n\\n    struct PoolData {\\n        address token0;\\n        address token1;\\n        uint160 sqrtPriceX96;\\n        int24 currentTick;\\n        int24 tickSpacing;\\n    }\\n\\n    error SwapError(uint256 amount0, uint256 amount1, uint256 ratio0, uint256 ratio1);\\n\\n    /// @notice Sets the protocol parameters\\n    /// @param args The protocol parameters\\n    function setProtocolParams(ProtocolStorage memory args) external;\\n\\n    /// @notice Gets the npm address\\n    function npm() external view returns (address);\\n\\n    /// @notice Gets the eid\\n    function eid() external view returns (uint32);\\n\\n    function getPoolData(address pair) external view returns (PoolData memory);\\n\\n    function closePosition(uint256 tokenId, address recipient, address feeRecipient) external;\\n\\n    function mintPosition(\\n        address pair,\\n        int24 tickRange0,\\n        int24 tickRange1,\\n        uint256 amountOut0,\\n        uint256 amountOut1,\\n        address recipient\\n    ) external returns (uint256 tokenId);\\n\\n    function increaseLiquidity(uint256 tokenId, uint256 amount0, uint256 amount1) external returns (uint128 liquidity);\\n\\n    function swap(\\n        address pair,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96,\\n        bool zeroForOne\\n    ) external;\\n\\n    function simulateSwap(\\n        address pair,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96,\\n        bool zeroForOne,\\n        int24[] memory tickRange\\n    ) external;\\n\\n    /**\\n     * @dev Retrieves the decimal places for both tokens in a pool.\\n     * @param pair The address of the pool.\\n     * @return The decimal places for token0 and token1.\\n     */\\n    function getPoolDecimals(address pair, uint32 eid) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Retrieves the current square root price of a pool.\\n     * @param pair The address of the pool.\\n     * @return The current square root price in Q64.96 format.\\n     */\\n    function getPoolSqrtRatioX96(address pair, uint32 eid) external view returns (uint160);\\n\\n    /**\\n     * @dev Retrieves the tick spacing of a pool.\\n     * @param pair The address of the pool.\\n     * @return The tick spacing.\\n     */\\n    function getPoolTickSpacing(address pair, uint32 eid) external view returns (int24);\\n\\n    /**\\n     * @dev Retrieves the current tick of a pool.\\n     * @param pair The address of the pool.\\n     * @return The current tick.\\n     */\\n    function getPoolTick(address pair, uint32 eid) external view returns (int24);\\n\\n    /**\\n     * @dev Retrieves the addresses of both tokens in a pool.\\n     * @param pair The address of the pool.\\n     * @return The addresses of token0 and token1.\\n     */\\n    function getPoolTokens(address pair, uint32 eid) external view returns (address, address);\\n\\n    function getPositionAmounts(uint256 tokenId, uint32 _eid) external view returns (uint256 amount0, uint256 amount1);\\n\\n    function getPositionTicks(uint256 tokenId, uint32 _eid) external view returns (int24 tickLower, int24 tickUpper);\\n}\"\n    },\n    \"contracts/interfaces/Modifiers.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LibAccessControl} from \\\"../libraries/core/LibAccessControl.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\ncontract Modifiers {\\n    modifier onlyRole(bytes32 role) {\\n        LibAccessControl.checkRole(role);\\n        _;\\n    }\\n\\n    modifier onlyDiamond() {\\n        require(address(this) == msg.sender, \\\"Restricted to Diamond\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(LibAccessControl.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to Admin\\\");\\n        _;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/core/LibAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary LibAccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_SLOT = keccak256(\\\"access.control.storage\\\");\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n\\n    function accessControlStorage() internal pure returns (Layout storage l) {\\n        bytes32 slot = ACCESS_CONTROL_STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        checkRole(role);\\n        _;\\n    }\\n\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return accessControlStorage().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return accessControlStorage().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        accessControlStorage().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        accessControlStorage().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        accessControlStorage().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function renounceRole(bytes32 role) internal {\\n        revokeRole(role, msg.sender);\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/core/LibCoreStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary LibCoreStorage {}\\n\"\n    },\n    \"contracts/libraries/diamond/LibDiamond.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../../interfaces/diamond/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/util/Math.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n            (\\n                amount <= type(uint160).max\\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n            );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n            (\\n                amount <= type(uint160).max\\n                    ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                    : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n            );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                sqrtRatioAX96\\n            )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n\\n    function unsafe_sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return a - b;\\n        }\\n    }\\n}\\n\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\n// TODO Updated -> see below TODO breakpoints\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        //        require(absTick <= uint256(MAX_TICK), 'T'); //TODO Need convert int24 to uint256\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) internal pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        unchecked {\\n            uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n        // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000\n    },\n    \"evmVersion\": \"paris\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "4253cf180701df7a9e302ffefa435dc1",
      "transactionHash": "0xd89958c02c4c9915f6877ddd4edebf9dfcceb090ce1f54446bb91aea296e78a7",
      "args": []
    },
    "decoded": {
      "from": "0xab918d486c61ADd7c577F1af938117bBD422f088",
      "gasPrice": "628963489",
      "maxFeePerGas": "628963489",
      "maxPriorityFeePerGas": "543498075",
      "gasLimit": "427566",
      "to": null,
      "value": "0",
      "nonce": 12,
      "data": "0x6080604052348015600f57600080fd5b506106c58061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100e2578063adfca15e146100f7578063cdffacc61461011757600080fd5b806301ffc9a71461006c57806352ef6b2c146100cd575b600080fd5b6100b861007a3660046104df565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100d5610181565b6040516100c49190610510565b6100ea610206565b6040516100c491906105a2565b61010a610105366004610627565b6103ec565b6040516100c49190610650565b6101696101253660046104df565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c60205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016100c4565b606060007fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600281018054604080516020808402820181019092528281529394508301828280156101fb57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101dd575b505050505091505090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e546060907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c908067ffffffffffffffff81111561026657610266610663565b6040519080825280602002602001820160405280156102ac57816020015b6040805180820190915260008152606060208201528152602001906001900390816102845790505b50925060005b818110156103e65760008360020182815481106102d1576102d1610679565b9060005260206000200160009054906101000a90046001600160a01b031690508085838151811061030457610304610679565b6020908102919091018101516001600160a01b0392831690529082166000908152600186018252604090819020805482518185028101850190935280835291929091908301828280156103b857602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103655790505b50505050508583815181106103cf576103cf610679565b6020908102919091018101510152506001016102b2565b50505090565b6001600160a01b03811660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602090815260409182902080548351818402810184019094528084526060937fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c93909291908301828280156104d257602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161047f5790505b5050505050915050919050565b6000602082840312156104f157600080fd5b81356001600160e01b03198116811461050957600080fd5b9392505050565b602080825282518282018190526000918401906040840190835b818110156105515783516001600160a01b031683526020938401939092019160010161052a565b509095945050505050565b600081518084526020840193506020830160005b828110156105985781516001600160e01b031916865260209586019590910190600101610570565b5093949350505050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561061b57603f1987860301845281516001600160a01b0381511686526020810151905060406020870152610605604087018261055c565b95505060209384019391909101906001016105ca565b50929695505050505050565b60006020828403121561063957600080fd5b81356001600160a01b038116811461050957600080fd5b602081526000610509602083018461055c565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220f82f9e1a73e9631c8d834aa655d2f272772fe02f8afad9490d0828e23bec05a164736f6c634300081b0033",
      "r": "0x75c251a1e6d4dd642309bf0e6b64ec6b68135614eb4e65c18914b321db4b4d6a",
      "s": "0x6453e73577025938c77891bd04f1831c364a1a7478b72f0ce64adcf97fb48557",
      "v": 1,
      "chainId": 534352
    }
  }
}