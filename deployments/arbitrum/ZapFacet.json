{
  "address": "0x5Ba4A8Bc376EBe75af280C0a898196A07892fa76",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "initialAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "putAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "returnedAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "swapSide",
          "type": "bool"
        }
      ],
      "name": "SimulationResult",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "InputTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "OutputTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "initialAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "putAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "returnedAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "ZapResult",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "inchRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingLiquidityThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inchRouter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "binSearchIterations",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingLiquidityThreshold",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZapFacet.ZapStorage",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "setZapParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZapFacet.InputToken[]",
              "name": "inputs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amountMin",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZapFacet.OutputToken[]",
              "name": "outputs",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct IZapFacet.SwapData",
          "name": "swapData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "int24[]",
              "name": "tickRange",
              "type": "int24[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsOut",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "isSimulation",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "adjustSwapSide",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "adjustSwapAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZapFacet.ZapInParams",
          "name": "paramsData",
          "type": "tuple"
        }
      ],
      "name": "zapIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "zapOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9509dd65b7fa240dc6bd53036968707b1f7658d06d4a8f24c1b404d29e4ed8fa",
  "receipt": {
    "to": null,
    "from": "0x01a9fF225a51750599b55C0a23c9d2fCD17969d4",
    "contractAddress": "0x5Ba4A8Bc376EBe75af280C0a898196A07892fa76",
    "transactionIndex": 5,
    "gasUsed": "12500476",
    "logsBloom": "0x
    "blockHash": "0xdf3ee51b08f93d602d6b284a2ebe8c795c360fb01e2d1a5eefd66ed696d3ec5f",
    "transactionHash": "0x9509dd65b7fa240dc6bd53036968707b1f7658d06d4a8f24c1b404d29e4ed8fa",
    "logs": [],
    "blockNumber": 275149923,
    "cumulativeGasUsed": "17563307",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "7c7757e98c9be84dc1162a9433578ee2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initialAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"putAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"returnedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"swapSide\",\"type\":\"bool\"}],\"name\":\"SimulationResult\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"InputTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"OutputTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"initialAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"putAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"returnedAmounts\",\"type\":\"uint256[]\"}],\"name\":\"ZapResult\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"inchRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingLiquidityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inchRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"binSearchIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingLiquidityThreshold\",\"type\":\"uint256\"}],\"internalType\":\"struct IZapFacet.ZapStorage\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"setZapParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"internalType\":\"struct IZapFacet.InputToken[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMin\",\"type\":\"uint256\"}],\"internalType\":\"struct IZapFacet.OutputToken[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IZapFacet.SwapData\",\"name\":\"swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"int24[]\",\"name\":\"tickRange\",\"type\":\"int24[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isSimulation\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"adjustSwapSide\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"adjustSwapAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IZapFacet.ZapInParams\",\"name\":\"paramsData\",\"type\":\"tuple\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"SimulationResult(address[],uint256[],uint256[],uint256[],uint256,bool)\":[{\"params\":{\"amountToSwap\":\"Amount of tokens needed to be swapped secondarily\",\"initialAmounts\":\"Amounts of tokens after swap\",\"putAmounts\":\"Amounts of tokens put into the pool\",\"returnedAmounts\":\"Amounts of tokens returned to the user\",\"swapSide\":\"Flag indicating if swap token0 to token1 or vice versa\",\"tokens\":\"Array of pool token addresses\"}}]},\"events\":{\"InputTokens(address[],uint256[])\":{\"params\":{\"amounts\":\"Array of input token amounts\",\"tokens\":\"Array of input token addresses\"}},\"OutputTokens(address[],uint256[])\":{\"params\":{\"amounts\":\"Array of output token amounts\",\"tokens\":\"Array of output token addresses\"}},\"TokenId(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token\"}},\"ZapResult(address[],uint256[],uint256[],uint256[])\":{\"params\":{\"initialAmounts\":\"Amounts of tokens after swap\",\"putAmounts\":\"Amounts of tokens put into the pool\",\"returnedAmounts\":\"Amounts of tokens returned to the user\",\"tokens\":\"Array of pool token addresses\"}}},\"kind\":\"dev\",\"methods\":{\"zapIn(((address,uint256)[],(address,uint256)[],bytes[]),(address,int24[],uint256[],bool,bool,uint256))\":{\"params\":{\"paramsData\":\"The parameters for the zap\",\"swapData\":\"The swap data for the zap\"}},\"zapOut(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token to zap out of\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"SimulationResult(address[],uint256[],uint256[],uint256[],uint256,bool)\":[{\"notice\":\"Error thrown with the simulation result of a zap operation\"}]},\"events\":{\"InputTokens(address[],uint256[])\":{\"notice\":\"Emitted after swap\"},\"OutputTokens(address[],uint256[])\":{\"notice\":\"Emitted after swap\"},\"TokenId(uint256)\":{\"notice\":\"Emitted when a new token ID is generated\"},\"ZapResult(address[],uint256[],uint256[],uint256[])\":{\"notice\":\"Emitted with the result of a zap operation\"}},\"kind\":\"user\",\"methods\":{\"zapIn(((address,uint256)[],(address,uint256)[],bytes[]),(address,int24[],uint256[],bool,bool,uint256))\":{\"notice\":\"Zaps in to a liquidity position\"},\"zapOut(uint256)\":{\"notice\":\"Zaps out of a liquidity position\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/core/ZapFacet.sol\":\"ZapFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary AddressCast {\\n    error AddressCast_InvalidSizeForAddress();\\n    error AddressCast_InvalidAddress();\\n\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint256 offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint256(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\\n        result = new bytes(_size);\\n        unchecked {\\n            uint256 offset = 256 - _size * 8;\\n            assembly {\\n                mstore(add(result, 32), shl(offset, _addressBytes32))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint256(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0x2ebbcaaab3554edcd41b581f1a72ac1806afbfb8047d0d47ff098f9af30d6deb\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppRead.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { AddressCast } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\n\\nimport { OApp } from \\\"./OApp.sol\\\";\\n\\nabstract contract OAppRead is OApp {\\n    constructor(address _endpoint, address _delegate) OApp(_endpoint, _delegate) {}\\n\\n    // -------------------------------\\n    // Only Owner\\n    function setReadChannel(uint32 _channelId, bool _active) public virtual onlyOwner {\\n        _setPeer(_channelId, _active ? AddressCast.toBytes32(address(this)) : bytes32(0));\\n    }\\n}\\n\",\"keccak256\":\"0x1d738b541a31716e81305f09084cf22c000ab6233dcb96db315026fc88062ff6\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/libs/ReadCodecV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nstruct EVMCallRequestV1 {\\n    uint16 appRequestLabel; // Label identifying the application or type of request (can be use in lzCompute)\\n    uint32 targetEid; // Target endpoint ID (representing a target blockchain)\\n    bool isBlockNum; // True if the request = block number, false if timestamp\\n    uint64 blockNumOrTimestamp; // Block number or timestamp to use in the request\\n    uint16 confirmations; // Number of block confirmations on top of the requested block number or timestamp before the view function can be called\\n    address to; // Address of the target contract on the target chain\\n    bytes callData; // Calldata for the contract call\\n}\\n\\nstruct EVMCallComputeV1 {\\n    uint8 computeSetting; // Compute setting (0 = map only, 1 = reduce only, 2 = map reduce)\\n    uint32 targetEid; // Target endpoint ID (representing a target blockchain)\\n    bool isBlockNum; // True if the request = block number, false if timestamp\\n    uint64 blockNumOrTimestamp; // Block number or timestamp to use in the request\\n    uint16 confirmations; // Number of block confirmations on top of the requested block number or timestamp before the view function can be called\\n    address to; // Address of the target contract on the target chain\\n}\\n\\nlibrary ReadCodecV1 {\\n    using SafeCast for uint256;\\n\\n    uint16 internal constant CMD_VERSION = 1;\\n\\n    uint8 internal constant REQUEST_VERSION = 1;\\n    uint16 internal constant RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL = 1;\\n\\n    uint8 internal constant COMPUTE_VERSION = 1;\\n    uint16 internal constant COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL = 1;\\n\\n    error InvalidVersion();\\n    error InvalidType();\\n\\n    function decode(\\n        bytes calldata _cmd\\n    )\\n        internal\\n        pure\\n        returns (uint16 appCmdLabel, EVMCallRequestV1[] memory evmCallRequests, EVMCallComputeV1 memory compute)\\n    {\\n        uint256 offset = 0;\\n        uint16 cmdVersion = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n        if (cmdVersion != CMD_VERSION) revert InvalidVersion();\\n\\n        appCmdLabel = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n\\n        (evmCallRequests, offset) = decodeRequestsV1(_cmd, offset);\\n\\n        // decode the compute if it exists\\n        if (offset < _cmd.length) {\\n            (compute, ) = decodeEVMCallComputeV1(_cmd, offset);\\n        }\\n    }\\n\\n    function decodeRequestsV1(\\n        bytes calldata _cmd,\\n        uint256 _offset\\n    ) internal pure returns (EVMCallRequestV1[] memory evmCallRequests, uint256 newOffset) {\\n        newOffset = _offset;\\n        uint16 requestCount = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n\\n        evmCallRequests = new EVMCallRequestV1[](requestCount);\\n        for (uint16 i = 0; i < requestCount; i++) {\\n            uint8 requestVersion = uint8(_cmd[newOffset]);\\n            newOffset += 1;\\n            if (requestVersion != REQUEST_VERSION) revert InvalidVersion();\\n\\n            uint16 appRequestLabel = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n            newOffset += 2;\\n\\n            uint16 resolverType = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n            newOffset += 2;\\n\\n            if (resolverType == RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL) {\\n                (EVMCallRequestV1 memory request, uint256 nextOffset) = decodeEVMCallRequestV1(\\n                    _cmd,\\n                    newOffset,\\n                    appRequestLabel\\n                );\\n                newOffset = nextOffset;\\n                evmCallRequests[i] = request;\\n            } else {\\n                revert InvalidType();\\n            }\\n        }\\n    }\\n\\n    function decodeEVMCallRequestV1(\\n        bytes calldata _cmd,\\n        uint256 _offset,\\n        uint16 _appRequestLabel\\n    ) internal pure returns (EVMCallRequestV1 memory request, uint256 newOffset) {\\n        newOffset = _offset;\\n        request.appRequestLabel = _appRequestLabel;\\n\\n        uint16 requestSize = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        request.targetEid = uint32(bytes4(_cmd[newOffset:newOffset + 4]));\\n        newOffset += 4;\\n        request.isBlockNum = uint8(_cmd[newOffset]) == 1;\\n        newOffset += 1;\\n        request.blockNumOrTimestamp = uint64(bytes8(_cmd[newOffset:newOffset + 8]));\\n        newOffset += 8;\\n        request.confirmations = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        request.to = address(bytes20(_cmd[newOffset:newOffset + 20]));\\n        newOffset += 20;\\n        uint16 callDataSize = requestSize - 35;\\n        request.callData = _cmd[newOffset:newOffset + callDataSize];\\n        newOffset += callDataSize;\\n    }\\n\\n    function decodeEVMCallComputeV1(\\n        bytes calldata _cmd,\\n        uint256 _offset\\n    ) internal pure returns (EVMCallComputeV1 memory compute, uint256 newOffset) {\\n        newOffset = _offset;\\n        uint8 computeVersion = uint8(_cmd[newOffset]);\\n        newOffset += 1;\\n        if (computeVersion != COMPUTE_VERSION) revert InvalidVersion();\\n        uint16 computeType = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        if (computeType != COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL) revert InvalidType();\\n\\n        compute.computeSetting = uint8(_cmd[newOffset]);\\n        newOffset += 1;\\n        compute.targetEid = uint32(bytes4(_cmd[newOffset:newOffset + 4]));\\n        newOffset += 4;\\n        compute.isBlockNum = uint8(_cmd[newOffset]) == 1;\\n        newOffset += 1;\\n        compute.blockNumOrTimestamp = uint64(bytes8(_cmd[newOffset:newOffset + 8]));\\n        newOffset += 8;\\n        compute.confirmations = uint16(bytes2(_cmd[newOffset:newOffset + 2]));\\n        newOffset += 2;\\n        compute.to = address(bytes20(_cmd[newOffset:newOffset + 20]));\\n        newOffset += 20;\\n    }\\n\\n    function decodeCmdAppLabel(bytes calldata _cmd) internal pure returns (uint16) {\\n        uint256 offset = 0;\\n        uint16 cmdVersion = uint16(bytes2(_cmd[offset:offset + 2]));\\n        offset += 2;\\n        if (cmdVersion != CMD_VERSION) revert InvalidVersion();\\n\\n        return uint16(bytes2(_cmd[offset:offset + 2]));\\n    }\\n\\n    function decodeRequestV1AppRequestLabel(bytes calldata _request) internal pure returns (uint16) {\\n        uint256 offset = 0;\\n        uint8 requestVersion = uint8(_request[offset]);\\n        offset += 1;\\n        if (requestVersion != REQUEST_VERSION) revert InvalidVersion();\\n\\n        return uint16(bytes2(_request[offset:offset + 2]));\\n    }\\n\\n    function encode(\\n        uint16 _appCmdLabel,\\n        EVMCallRequestV1[] memory _evmCallRequests,\\n        EVMCallComputeV1 memory _evmCallCompute\\n    ) internal pure returns (bytes memory) {\\n        bytes memory cmd = encode(_appCmdLabel, _evmCallRequests);\\n        if (_evmCallCompute.targetEid != 0) {\\n            // if eid is 0, it means no compute\\n            cmd = appendEVMCallComputeV1(cmd, _evmCallCompute);\\n        }\\n        return cmd;\\n    }\\n\\n    function encode(\\n        uint16 _appCmdLabel,\\n        EVMCallRequestV1[] memory _evmCallRequests\\n    ) internal pure returns (bytes memory) {\\n        bytes memory cmd = abi.encodePacked(CMD_VERSION, _appCmdLabel, _evmCallRequests.length.toUint16());\\n        for (uint256 i = 0; i < _evmCallRequests.length; i++) {\\n            cmd = appendEVMCallRequestV1(cmd, _evmCallRequests[i]);\\n        }\\n        return cmd;\\n    }\\n\\n    // todo: optimize this with Buffer\\n    function appendEVMCallRequestV1(\\n        bytes memory _cmd,\\n        EVMCallRequestV1 memory _request\\n    ) internal pure returns (bytes memory) {\\n        bytes memory newCmd = abi.encodePacked(\\n            _cmd,\\n            REQUEST_VERSION,\\n            _request.appRequestLabel,\\n            RESOLVER_TYPE_SINGLE_VIEW_EVM_CALL,\\n            (_request.callData.length + 35).toUint16(),\\n            _request.targetEid\\n        );\\n        return\\n            abi.encodePacked(\\n                newCmd,\\n                _request.isBlockNum,\\n                _request.blockNumOrTimestamp,\\n                _request.confirmations,\\n                _request.to,\\n                _request.callData\\n            );\\n    }\\n\\n    function appendEVMCallComputeV1(\\n        bytes memory _cmd,\\n        EVMCallComputeV1 memory _compute\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _cmd,\\n                COMPUTE_VERSION,\\n                COMPUTE_TYPE_SINGLE_VIEW_EVM_CALL,\\n                _compute.computeSetting,\\n                _compute.targetEid,\\n                _compute.isBlockNum,\\n                _compute.blockNumOrTimestamp,\\n                _compute.confirmations,\\n                _compute.to\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x483cb31075b3c9ba277856bccd6cf45f96859da6e3f92f88358d478c42e3e734\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\"},\"contracts/facets/core/ZapFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IMasterFacet.sol\\\";\\n\\ncontract ZapFacet is IZapFacet, Modifiers {\\n\\n    bytes32 internal constant ZAP_STORAGE_POSITION = keccak256(\\\"zap.storage\\\");\\n\\n    function zapStorage() internal pure returns (ZapStorage storage ds) {\\n        bytes32 position = ZAP_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function setZapParams(ZapStorage memory args) external onlyAdmin {\\n        require(args.inchRouter != address(0), 'inchRouter is empty');\\n        require(args.binSearchIterations != 0, 'binSearchIterations is empty');\\n        \\n        zapStorage().inchRouter = args.inchRouter;\\n        zapStorage().binSearchIterations = args.binSearchIterations;\\n        zapStorage().remainingLiquidityThreshold = args.remainingLiquidityThreshold;\\n    }\\n\\n    function inchRouter() public view returns (address) {\\n        return zapStorage().inchRouter;\\n    }\\n\\n    function remainingLiquidityThreshold() public view returns (uint256) {\\n        return zapStorage().remainingLiquidityThreshold;\\n    }\\n\\n    function zapIn(SwapData memory swapData, ZapInParams memory paramsData) external {\\n        _zapIn(swapData, paramsData, true, 0);\\n    }\\n\\n    function zapOut(uint256 tokenId) external {\\n        _zapOut(tokenId, msg.sender, msg.sender);\\n    }\\n\\n    struct PoolTokens {\\n        address[] token;\\n        IERC20[] asset;\\n        uint256[] amount;\\n    }\\n\\n    struct TokenAmounts {\\n        address[] tokens;\\n        uint256[] initial;\\n        uint256[] put;\\n        uint256[] returned;\\n    }\\n\\n    function _zapIn(\\n        SwapData memory swapData,\\n        ZapInParams memory paramsData,\\n        bool needTransfer,\\n        uint256 tokenId\\n    ) internal {\\n        validateInputs(swapData, paramsData);\\n        for (uint256 i = 0; i < swapData.inputs.length; i++) {\\n            IERC20 asset = IERC20(swapData.inputs[i].tokenAddress);\\n            if (needTransfer) {\\n                asset.transferFrom(msg.sender, address(this), swapData.inputs[i].amountIn);\\n            }\\n            asset.approve(zapStorage().inchRouter, swapData.inputs[i].amountIn);\\n        }\\n        swap1Inch(swapData);\\n        PoolTokens memory poolTokens = PoolTokens({\\n            token: new address[](2),\\n            asset: new IERC20[](2),\\n            amount: new uint256[](2)\\n        });\\n        TokenAmounts memory tokenAmounts = TokenAmounts({\\n            tokens: new address[](2),\\n            initial: new uint256[](2),\\n            put: new uint256[](2),\\n            returned: new uint256[](2)\\n        });\\n        (poolTokens.token[0], poolTokens.token[1]) = IMasterFacet(address(this)).getPoolTokens(paramsData.pool);\\n        tokenAmounts.tokens = poolTokens.token;\\n        for (uint256 i = 0; i < 2; i++) {\\n            poolTokens.asset[i] = IERC20(poolTokens.token[i]);\\n            if (needTransfer && paramsData.amountsOut[i] > 0) {\\n                poolTokens.asset[i].transferFrom(msg.sender, address(this), paramsData.amountsOut[i]);\\n            }\\n            poolTokens.amount[i] = poolTokens.asset[i].balanceOf(address(this));\\n            paramsData.amountsOut[i] = poolTokens.amount[i];\\n        }\\n        tokenAmounts.initial = poolTokens.amount;\\n        uint256[] memory positionAmounts = new uint256[](2);\\n        uint256[] memory newPositionAmounts = new uint256[](2);\\n        if (tokenId != 0) {\\n            (positionAmounts[0], positionAmounts[1]) = IMasterFacet(address(this)).getPositionAmounts(tokenId);\\n        }\\n        tokenId = manageLiquidity(paramsData, poolTokens, tokenId);\\n        adjustSwap(paramsData, poolTokens, tokenId);\\n        (newPositionAmounts[0], newPositionAmounts[1]) = IMasterFacet(address(this)).getPositionAmounts(tokenId);\\n\\n        for (uint256 i = 0; i < 2; i++) {\\n            if (newPositionAmounts[i] > positionAmounts[i]) {\\n                tokenAmounts.put[i] = newPositionAmounts[i] - positionAmounts[i];\\n            }\\n            tokenAmounts.returned[i] = poolTokens.asset[i].balanceOf(address(this));\\n            if (tokenAmounts.returned[i] > 0) {\\n                poolTokens.asset[i].transfer(msg.sender, tokenAmounts.returned[i]);\\n            }\\n        }\\n        for (uint256 i = 0; i < swapData.inputs.length; i++) {\\n            IERC20 asset = IERC20(swapData.inputs[i].tokenAddress);\\n            uint256 balance = asset.balanceOf(address(this));\\n            if (balance > 0) {\\n                asset.transfer(msg.sender, balance);\\n            }\\n        }\\n        if (!paramsData.isSimulation) {\\n            emit ZapResult(tokenAmounts.tokens, tokenAmounts.initial, tokenAmounts.put, tokenAmounts.returned);\\n        } else {\\n            revert SimulationResult(\\n                tokenAmounts.tokens, \\n                tokenAmounts.initial, \\n                tokenAmounts.put, \\n                tokenAmounts.returned, \\n                paramsData.adjustSwapAmount, \\n                paramsData.adjustSwapSide\\n            );\\n        }\\n    }\\n\\n    function _zapOut(uint256 tokenId, address recipient, address feeRecipient) internal {\\n        // IMasterFacet(address(this)).isOwner(tokenId, msg.sender);\\n        IMasterFacet(address(this)).closePosition(tokenId, recipient, feeRecipient);\\n    }\\n\\n    function validateInputs(SwapData memory swapData, ZapInParams memory paramsData) internal pure {\\n        for (uint256 i = 0; i < swapData.inputs.length; i++) {\\n            for (uint256 j = 0; j < i; j++) {\\n                require(\\n                    swapData.inputs[i].tokenAddress != swapData.inputs[j].tokenAddress,\\n                    \\\"Duplicate input tokens\\\"\\n                );\\n            }\\n            require(swapData.inputs[i].amountIn > 0, \\\"Input amount is 0\\\");\\n        }\\n\\n        require(paramsData.amountsOut.length == 2, \\\"Invalid output length, must be exactly 2\\\");\\n        require(paramsData.tickRange.length == 2, \\\"Invalid tick range length, must be exactly 2\\\");\\n        require(paramsData.tickRange[0] < paramsData.tickRange[1], \\\"Invalid tick range\\\");\\n    }\\n\\n    function swap1Inch(SwapData memory swapData) internal {\\n        for (uint256 i = 0; i < swapData.data.length; i++) {\\n            (bool success,) = zapStorage().inchRouter.call{value : 0}(swapData.data[i]);\\n            require(success, \\\"router swap invalid\\\");\\n        }\\n\\n        {\\n            address[] memory tokensIn = new address[](swapData.inputs.length);\\n            uint256[] memory amountsIn = new uint256[](swapData.inputs.length);\\n            for (uint256 i = 0; i < swapData.inputs.length; i++) {\\n                tokensIn[i] = swapData.inputs[i].tokenAddress;\\n                amountsIn[i] = swapData.inputs[i].amountIn;\\n            }\\n            emit InputTokens(tokensIn, amountsIn);\\n        }\\n        {\\n            address[] memory tokensOut = new address[](swapData.outputs.length);\\n            uint256[] memory amountsOut = new uint256[](swapData.outputs.length);\\n            for (uint256 i = 0; i < swapData.outputs.length; i++) {\\n                tokensOut[i] = swapData.outputs[i].tokenAddress;\\n                amountsOut[i] = IERC20(tokensOut[i]).balanceOf(address(this));\\n            }\\n            emit OutputTokens(tokensOut, amountsOut);\\n        }\\n    }\\n\\n    function manageLiquidity(ZapInParams memory paramsData, PoolTokens memory poolTokens, uint256 tokenId) internal returns (uint256) {\\n        poolTokens.asset[0].approve(IProtocolFacet(address(this)).npm(), poolTokens.amount[0]);\\n        poolTokens.asset[1].approve(IProtocolFacet(address(this)).npm(), poolTokens.amount[1]);\\n\\n        if (tokenId == 0) {\\n            tokenId = IMasterFacet(address(this)).mintPosition(\\n                paramsData.pool,\\n                paramsData.tickRange[0],\\n                paramsData.tickRange[1],\\n                poolTokens.amount[0],\\n                poolTokens.amount[1],\\n                msg.sender\\n            );\\n            emit TokenId(tokenId);\\n        } else {\\n            IMasterFacet(address(this)).increaseLiquidity(tokenId, poolTokens.amount[0], poolTokens.amount[1]);\\n        }\\n        return tokenId;\\n    }\\n\\n    function adjustSwap(\\n        ZapInParams memory paramsData,\\n        PoolTokens memory poolTokens,\\n        uint256 tokenId\\n    ) internal {\\n        if (paramsData.isSimulation) {\\n            (paramsData.adjustSwapAmount, paramsData.adjustSwapSide) = simulateSwap(paramsData, poolTokens);\\n        }\\n        if (paramsData.adjustSwapAmount > 0) {\\n            IMasterFacet(address(this)).swap(paramsData.pool, paramsData.adjustSwapAmount, 0, paramsData.adjustSwapSide);\\n        }\\n        paramsData.amountsOut[0] = poolTokens.asset[0].balanceOf(address(this));\\n        paramsData.amountsOut[1] = poolTokens.asset[1].balanceOf(address(this));\\n        poolTokens.asset[0].approve(IProtocolFacet(address(this)).npm(), paramsData.amountsOut[0]);\\n        poolTokens.asset[1].approve(IProtocolFacet(address(this)).npm(), paramsData.amountsOut[1]);\\n\\n        IMasterFacet(address(this)).increaseLiquidity(tokenId, paramsData.amountsOut[0], paramsData.amountsOut[1]);\\n    }\\n\\n    struct BinSearchParams {\\n        uint256 left;\\n        uint256 right;\\n        uint256 mid;\\n    }\\n\\n    function simulateSwap(\\n        ZapInParams memory paramsData, \\n        PoolTokens memory poolTokens\\n    ) internal returns (uint256 amountToSwap, bool zeroForOne) {\\n        zeroForOne = poolTokens.asset[0].balanceOf(address(this)) > poolTokens.asset[1].balanceOf(address(this));\\n        BinSearchParams memory binSearchParams;\\n        binSearchParams.right = poolTokens.asset[zeroForOne ? 0 : 1].balanceOf(address(this));\\n        for (uint256 i = 0; i < zapStorage().binSearchIterations; i++) {\\n            binSearchParams.mid = (binSearchParams.left + binSearchParams.right) / 2;\\n\\n            try IMasterFacet(address(this)).simulateSwap(\\n                paramsData.pool, \\n                binSearchParams.mid, \\n                0, \\n                zeroForOne, \\n                paramsData.tickRange\\n            ) \\n            {} catch (bytes memory _data) {\\n                bytes memory data;\\n                assembly {\\n                    data := add(_data, 4)\\n                }\\n                uint256[] memory swapResult = new uint256[](4);\\n                (swapResult[0], swapResult[1], swapResult[2], swapResult[3]) = abi.decode(data, (uint256, uint256, uint256, uint256));\\n                bool compareResult = zeroForOne ? \\n                    IMasterFacet(address(this)).compareRatios(swapResult[0], swapResult[1], swapResult[2], swapResult[3]) : \\n                    IMasterFacet(address(this)).compareRatios(swapResult[1], swapResult[0], swapResult[3], swapResult[2]);\\n                if (compareResult) {\\n                    binSearchParams.left = binSearchParams.mid;\\n                } else {\\n                    binSearchParams.right = binSearchParams.mid;\\n                }\\n            }\\n        }\\n        amountToSwap = binSearchParams.mid;\\n    }\\n}\",\"keccak256\":\"0x1dbf7f7dbefc7c71fe7787dec58640319e87101b1fd40bb0e353016a8d5f5e99\",\"license\":\"MIT\"},\"contracts/interfaces/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nbytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\nuint256 constant MAX_UINT_VALUE = type(uint256).max;\\nuint256 constant PRECISION_DEC = 18; // constant for more precise returns\\nuint256 constant BASE_DIV = 1000000; // 10\\n\\n// layer0 constants\\n\\nuint32 constant ETH_EID = 30101; // LayerZero EID for Ethereum Mainnet\\n// address constant ETH_ZAP = 0x0; // add actual address\\n\\nuint32 constant BASE_EID = 30184; // LayerZero EID for Base Mainnet\\n// address constant BASE_ZAP = 0x0; // add actual address\\n\\nuint32 constant OPT_EID = 30111; // LayerZero EID for Optimism Mainnet\\n// address constant OPT_ZAP = 0x0; // add actual address\\n\",\"keccak256\":\"0xc1355055462b3dd9d5f80d850355a7e30739d3cab4f82f5b8a15224634fbd452\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./core/IMathFacet.sol\\\";\\nimport \\\"./core/IOReadFacet.sol\\\";\\nimport \\\"./core/IProportionFacet.sol\\\";\\nimport \\\"./core/IZapFacet.sol\\\";\\nimport \\\"./IProtocolFacet.sol\\\";\\nimport \\\"./Modifiers.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// interface IMasterFacet is IMathFacet, IOReadFacet, IProtocolFacet, IProportionFacet, IZapFacet {}\\ninterface IMasterFacet is IMathFacet, IProtocolFacet, IProportionFacet, IZapFacet {}\\n\",\"keccak256\":\"0x97c248d8f51842d9bdec49980f565478715e2b765ef8dbf3804f6b7599828fb5\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title IProtocolFacet\\n * @dev Interface for the Protocol Facet\\n * This interface defines the structure and functions for managing liquidity positions\\n * in a DEX environment.\\n */\\ninterface IProtocolFacet {\\n\\n    event CollectRewards(uint256 fee0, uint256 fee1);\\n\\n    /// @notice Structure for protocol storage\\n    /// @param npm The address of the non-fungible position manager\\n    struct ProtocolStorage {\\n        address npm;\\n        uint32 eid;\\n    }\\n\\n    struct PoolData {\\n        address token0;\\n        address token1;\\n        uint160 sqrtPriceX96;\\n        int24 currentTick;\\n        int24 tickSpacing;\\n    }\\n\\n    error SwapError(uint256 amount0, uint256 amount1, uint256 ratio0, uint256 ratio1);\\n\\n    struct PositionInfo {\\n        string platform;     // The protocol where the position is held\\n        uint256 tokenId;     // Unique identifier for the position\\n        address poolId;      // Address of the liquidity pool\\n        address token0;      // Address of the first token in the pair\\n        address token1;      // Address of the second token in the pair\\n        uint256 amount0;     // Amount of token0 in the position\\n        uint256 amount1;     // Amount of token1 in the position\\n        uint256 fee0;        // Accumulated fees for token0\\n        uint256 fee1;        // Accumulated fees for token1\\n        uint256 emissions;   // Emissions rewards\\n        int24 tickLower;     // Lower tick of the position's price range\\n        int24 tickUpper;     // Upper tick of the position's price range\\n        int24 currentTick;   // Current tick of the pool\\n        bool isStaked;       // Whether the position is staked\\n    }\\n\\n    /// @notice Sets the protocol parameters\\n    /// @param args The protocol parameters\\n    function setProtocolParams(ProtocolStorage memory args) external;\\n\\n    /// @notice Gets the npm address\\n    function npm() external view returns (address);\\n\\n    /// @notice Gets the eid\\n    function eid() external view returns (uint32);\\n\\n    function getPoolData(address pair) external view returns (PoolData memory);\\n\\n    function closePosition(uint256 tokenId, address recipient, address feeRecipient) external;\\n\\n    function mintPosition(\\n        address pair,\\n        int24 tickRange0,\\n        int24 tickRange1,\\n        uint256 amountOut0,\\n        uint256 amountOut1,\\n        address recipient\\n    ) external returns (uint256 tokenId);\\n\\n    function increaseLiquidity(uint256 tokenId, uint256 amount0, uint256 amount1) external returns (uint128 liquidity);\\n\\n    function swap(\\n        address pair,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96,\\n        bool zeroForOne\\n    ) external;\\n\\n    function simulateSwap(\\n        address pair,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96,\\n        bool zeroForOne,\\n        int24[] memory tickRange\\n    ) external;\\n\\n    /**\\n     * @dev Retrieves the decimal places for both tokens in a pool.\\n     * @param pair The address of the pool.\\n     * @return The decimal places for token0 and token1.\\n     */\\n    function getPoolDecimals(address pair) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Retrieves the current square root price of a pool.\\n     * @param pair The address of the pool.\\n     * @return The current square root price in Q64.96 format.\\n     */\\n    function getPoolSqrtRatioX96(address pair) external view returns (uint160);\\n\\n    /**\\n     * @dev Retrieves the tick spacing of a pool.\\n     * @param pair The address of the pool.\\n     * @return The tick spacing.\\n     */\\n    function getPoolTickSpacing(address pair) external view returns (int24);\\n\\n    /**\\n     * @dev Retrieves the current tick of a pool.\\n     * @param pair The address of the pool.\\n     * @return The current tick.\\n     */\\n    function getPoolTick(address pair) external view returns (int24);\\n\\n    /**\\n     * @dev Retrieves the addresses of both tokens in a pool.\\n     * @param pair The address of the pool.\\n     * @return The addresses of token0 and token1.\\n     */\\n    function getPoolTokens(address pair) external view returns (address, address);\\n\\n    function getPositionAmounts(uint256 tokenId) external view returns (uint256 amount0, uint256 amount1);\\n\\n    function getPositionTicks(uint256 tokenId) external view returns (int24 tickLower, int24 tickUpper);\\n\\n    function getPositionTokens(uint256 tokenId) external view returns (address token0, address token1);\\n\\n    function getPositions(address owner) external view returns (PositionInfo[] memory result);\\n}\",\"keccak256\":\"0x8a1b3704e349377f240af2adb5b5edd1460eb64f05e0ccd1d5f3129b95396369\",\"license\":\"MIT\"},\"contracts/interfaces/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LibAccessControl} from \\\"../libraries/core/LibAccessControl.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\ncontract Modifiers {\\n    modifier onlyRole(bytes32 role) {\\n        LibAccessControl.checkRole(role);\\n        _;\\n    }\\n\\n    modifier onlyDiamond() {\\n        require(address(this) == msg.sender, \\\"Restricted to Diamond\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(LibAccessControl.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to Admin\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x095b8f1ec445219006206ae6061e0501e2364d96795d51b3dab21e6b8c7dc1a1\",\"license\":\"MIT\"},\"contracts/interfaces/core/IMathFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title IMathFacet\\n/// @notice Interface for mathematical operations related to liquidity pools\\n/// @dev This interface defines functions for price calculations, tick conversions, and ratio comparisons\\ninterface IMathFacet {\\n\\n    /// @notice Get the current price of a liquidity pool\\n    /// @param pair The address of the liquidity pool\\n    /// @return The current price as a uint256\\n    function getCurrentPrice(address pair) external view returns (uint256);\\n\\n    /// @notice Get the tick spacing for a given liquidity pool\\n    /// @param pair The address of the liquidity pool\\n    /// @return The tick spacing as an int24\\n    function getTickSpacing(address pair) external view returns (int24);\\n\\n    /// @notice Convert a tick to its corresponding price\\n    /// @param pair The address of the liquidity pool\\n    /// @param tick The tick to convert\\n    /// @return The price corresponding to the given tick as a uint256\\n    function tickToPrice(address pair, int24 tick) external view returns (uint256);\\n\\n    /// @notice Convert prices to their closest ticks\\n    /// @param pair The address of the liquidity pool\\n    /// @param prices An array of prices to convert\\n    /// @return An array of the closest ticks corresponding to the given prices\\n    function priceToClosestTick(address pair, uint256[] memory prices) external view returns (int24[] memory);\\n\\n    /// @notice Get the current tick of a liquidity pool\\n    /// @param pair The address of the liquidity pool\\n    /// @return tick The current tick of the pool as an int24\\n    function getCurrentPoolTick(address pair) external view returns (int24 tick);\\n\\n    /// @notice Get the closest ticks (such as left <= current tick < right) to the current tick of a liquidity pool\\n    /// @param pair The address of the liquidity pool\\n    /// @return left The closest tick to the left of the current tick\\n    /// @return right The closest tick to the right of the current tick\\n    function closestTicksForCurrentTick(address pair) external view returns (int24 left, int24 right);\\n\\n    /// @notice Compare two ratios\\n    /// @param a Numerator of the first ratio\\n    /// @param b Denominator of the first ratio\\n    /// @param c Numerator of the second ratio\\n    /// @param d Denominator of the second ratio\\n    /// @return True if a/b > c/d, false otherwise\\n    function compareRatios(uint256 a, uint256 b, uint256 c, uint256 d) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xbb78a586ad1f71a4b478304a395c807420e0cbbc3cffc91acea8b61fffa2629a\",\"license\":\"MIT\"},\"contracts/interfaces/core/IOReadFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport { ILayerZeroEndpointV2, MessagingFee, MessagingReceipt, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { AddressCast } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\n\\nimport { ReadCodecV1, EVMCallComputeV1, EVMCallRequestV1 } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/ReadCodecV1.sol\\\";\\nimport { OAppOptionsType3 } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\nimport { OAppRead } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OAppRead.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IOReadFacet {\\n\\n    struct EvmReadRequest {\\n        uint16 appRequestLabel;\\n        uint32 targetEid;\\n        bool isBlockNum;\\n        uint64 blockNumOrTimestamp;\\n        uint16 confirmations;\\n        address to;\\n    }\\n\\n    struct EvmComputeRequest {\\n        uint8 computeSetting;\\n        uint32 targetEid;\\n        bool isBlockNum;\\n        uint64 blockNumOrTimestamp;\\n        uint16 confirmations;\\n        address to;\\n    }\\n\\n    struct ChainConfig {\\n        uint16 confirmations; // Number of confirmations required\\n        address zapAddress; // Address of the zap contract\\n        // address poolAddress; // Address of the pool contract\\n    }\\n\\n    function getProportion(uint32 _eid, address _pool, int24[] memory tickRange, bytes calldata _extraOptions) external payable returns (MessagingReceipt memory receipt);\\n\\n    \\n}\",\"keccak256\":\"0x9f8b4f49d25100e22910d940d2700633166bdb1009d408f2e27293c381b866da\",\"license\":\"MIT\"},\"contracts/interfaces/core/IProportionFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title IProportionFacet Interface\\n/// @notice Interface for the ProportionFacet which computes token ratios in a liquidity pool\\ninterface IProportionFacet {\\n\\n    struct InputSwapToken {\\n        address tokenAddress;\\n        uint256 amount;\\n        uint256 price;\\n    }\\n\\n    struct GetProportionRequest {\\n        address pair;\\n        int24[] tickRange;\\n        InputSwapToken[] inputTokens;\\n        uint256[] tokenIds;\\n    }\\n\\n    struct ResultOfProportion {\\n        address[] inputTokenAddresses;\\n        uint256[] inputTokenAmounts;\\n        address[] outputTokenAddresses;\\n        uint256[] outputTokenProportions;\\n        uint256[] outputTokenAmounts;\\n        uint256[] poolProportionsUsd;\\n    }\\n\\n    /// @notice Calculates the proportion for a given pool and tick range\\n    /// @param pair The address of the token pool\\n    /// @param tickRange The range of position in ticks\\n    /// @return The proportion of the pool in abstract measurements\\n    function getProportion(\\n        address pair,\\n        int24[] memory tickRange\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x9e1f7170cf467c013a6442e08b77dae6febb17672a8a0b04a80328f35a0da415\",\"license\":\"MIT\"},\"contracts/interfaces/core/IZapFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title IZapFacet\\n/// @notice Interface for the ZapFacet contract, which handles various liquidity management operations\\n/// @dev This interface defines the structures and functions for zapping in/out, rebalancing, increasing, and merging liquidity positions\\ninterface IZapFacet {\\n\\n    /// @notice Structure for zap storage\\n    /// @param inchRouter The address of the 1inch router\\n    /// @param binSearchIterations The number of iterations for the secondary swap bin search\\n    /// @param remainingLiquidityThreshold The remaining liquidity threshold, if sum of token0 and token1 after first increase is more than this, the swap will be adjusted\\n    struct ZapStorage {\\n        address inchRouter;\\n        uint256 binSearchIterations;\\n        uint256 remainingLiquidityThreshold;\\n    }\\n\\n    /// @notice Emitted after swap\\n    /// @param tokens Array of input token addresses\\n    /// @param amounts Array of input token amounts\\n    event InputTokens(address[] tokens, uint256[] amounts);\\n\\n    /// @notice Emitted after swap\\n    /// @param tokens Array of output token addresses\\n    /// @param amounts Array of output token amounts\\n    event OutputTokens(address[] tokens, uint256[] amounts);\\n\\n    /// @notice Emitted with the result of a zap operation\\n    /// @param tokens Array of pool token addresses\\n    /// @param initialAmounts Amounts of tokens after swap\\n    /// @param putAmounts Amounts of tokens put into the pool\\n    /// @param returnedAmounts Amounts of tokens returned to the user\\n    event ZapResult(\\n        address[] tokens, \\n        uint256[] initialAmounts, \\n        uint256[] putAmounts, \\n        uint256[] returnedAmounts\\n    );\\n\\n    /// @notice Emitted when a new token ID is generated\\n    /// @param tokenId The ID of the token\\n    event TokenId(uint256 tokenId);\\n\\n    /// @notice Error thrown with the simulation result of a zap operation\\n    /// @param tokens Array of pool token addresses\\n    /// @param initialAmounts Amounts of tokens after swap\\n    /// @param putAmounts Amounts of tokens put into the pool\\n    /// @param returnedAmounts Amounts of tokens returned to the user\\n    /// @param amountToSwap Amount of tokens needed to be swapped secondarily\\n    /// @param swapSide Flag indicating if swap token0 to token1 or vice versa\\n    error SimulationResult(\\n        address[] tokens, \\n        uint256[] initialAmounts, \\n        uint256[] putAmounts, \\n        uint256[] returnedAmounts,\\n        uint256 amountToSwap,\\n        bool swapSide\\n    );\\n\\n    /// @notice Structure for input token information\\n    /// @param tokenAddress The address of the input token\\n    /// @param amountIn The amount of tokens to input\\n    struct InputToken {\\n        address tokenAddress;\\n        uint256 amountIn;\\n    }\\n\\n    /// @notice Structure for pool's tokens information\\n    /// @param tokenAddress The address of the token\\n    /// @param amountMin The minimum amount of tokens after the swap\\n    struct OutputToken {\\n        address tokenAddress;\\n        uint256 amountMin;\\n    }\\n\\n    /// @notice Structure containing swap data\\n    /// @param inputs An array of input tokens\\n    /// @param outputs An array of output tokens\\n    /// @param data router data\\n    struct SwapData {\\n        InputToken[] inputs;\\n        OutputToken[] outputs;\\n        bytes[] data;\\n    }\\n\\n    /// @notice Parameters for zapping in\\n    /// @param pool The address of the liquidity pool\\n    /// @param tickRange An array of tick ranges for the position\\n    /// @param amountsOut An array of token amounts come directly from the user\\n    /// @param isSimulation A flag indicating whether this is a zap simulation\\n    /// @param adjustSwapSide Flag indicating if swap token0 to token1 or vice versa\\n    /// @param adjustSwapAmount The amount of secondary swap\\n    struct ZapInParams {\\n        address pool;\\n        int24[] tickRange;\\n        uint256[] amountsOut;\\n\\n        bool isSimulation;\\n        bool adjustSwapSide;\\n        uint256 adjustSwapAmount;\\n    }\\n\\n    /// @notice Zaps in to a liquidity position\\n    /// @param swapData The swap data for the zap\\n    /// @param paramsData The parameters for the zap\\n    function zapIn(SwapData memory swapData, ZapInParams memory paramsData) external;\\n\\n    /// @notice Zaps out of a liquidity position\\n    /// @param tokenId The ID of the token to zap out of\\n    function zapOut(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x4543edcfec2e63a2214a3fcd83e45451566046df83bbf0e473d4592436c0d609\",\"license\":\"MIT\"},\"contracts/libraries/core/LibAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary LibAccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_SLOT = keccak256(\\\"access.control.storage\\\");\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n\\n    function accessControlStorage() internal pure returns (Layout storage l) {\\n        bytes32 slot = ACCESS_CONTROL_STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        checkRole(role);\\n        _;\\n    }\\n\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        return accessControlStorage().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return accessControlStorage().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        accessControlStorage().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        accessControlStorage().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        accessControlStorage().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function renounceRole(bytes32 role) internal {\\n        revokeRole(role, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x1b03665fb9a09a126f8b69b75aa0916ec3cb6e1618bf95fafcf3da2356ab593c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50612fd48061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80635d76d687116100505780635d76d687146100db5780639c9774e9146100f0578063fe27824a1461010357600080fd5b80631b86e5f01461006c5780633936c8c4146100a1575b600080fd5b7fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa33546040519081526020015b60405180910390f35b7fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa31546040516001600160a01b039091168152602001610098565b6100ee6100e9366004612a93565b610116565b005b6100ee6100fe366004612b9c565b610128565b6100ee610111366004612be2565b6102d6565b6101248282600160006102e4565b5050565b610133600033610ef5565b6101845760405162461bcd60e51b815260206004820152601360248201527f5265737472696374656420746f2041646d696e0000000000000000000000000060448201526064015b60405180910390fd5b80516001600160a01b03166101db5760405162461bcd60e51b815260206004820152601360248201527f696e6368526f7574657220697320656d70747900000000000000000000000000604482015260640161017b565b806020015160000361022f5760405162461bcd60e51b815260206004820152601c60248201527f62696e536561726368497465726174696f6e7320697320656d70747900000000604482015260640161017b565b80517fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa3180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905560208101517fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa3255604001517fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa3355565b6102e1813333610f35565b50565b6102ee8484610fbb565b60005b8451518110156104c95760008560000151828151811061031357610313612bfb565b602002602001015160000151905083156103ee57806001600160a01b03166323b872dd33308960000151868151811061034e5761034e612bfb565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190612c11565b505b6001600160a01b03811663095ea7b37fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa3154885180516001600160a01b03909216918690811061043f5761043f612bfb565b6020026020010151602001516040518363ffffffff1660e01b815260040161047c9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf9190612c11565b50506001016102f1565b506104d38461127e565b6040805160026060820181815260c083018452600093839290608084019080368337505050815260408051600280825260608201835260209384019391929091830190803683375050508152604080516002808252606082018352602093840193919290918301908036833750505090526040805160026080820181815260e08301845293945060009391928392919060a08401908036833750505081526040805160028082526060820183526020938401939192909183019080368337505050815260408051600280825260608201835260209384019391929091830190803683375050508152604080516002808252606082018352602093840193919290918301908036833701905050905285516040517fca4f28030000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152909150309063ca4f2803906024016040805180830381865afa158015610643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106679190612c35565b8351805160009061067a5761067a612bfb565b60200260200101846000015160018151811061069857610698612bfb565b6001600160a01b039384166020918202929092010152911690528151815260005b60028110156109175782518051829081106106d6576106d6612bfb565b6020026020010151836020015182815181106106f4576106f4612bfb565b60200260200101906001600160a01b031690816001600160a01b03168152505084801561073e575060008660400151828151811061073457610734612bfb565b6020026020010151115b15610824578260200151818151811061075957610759612bfb565b60200260200101516001600160a01b03166323b872dd33308960400151858151811061078757610787612bfb565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190612c11565b505b8260200151818151811061083a5761083a612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561088a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ae9190612c6f565b836040015182815181106108c4576108c4612bfb565b602002602001018181525050826040015181815181106108e6576108e6612bfb565b60200260200101518660400151828151811061090457610904612bfb565b60209081029190910101526001016106b9565b50604082810151602083015280516002808252606082019092526000918160200160208202803683375050604080516002808252606082018352939450600093909250906020830190803683370190505090508415610a0c57604051630693132f60e51b815260048101869052309063d26265e0906024016040805180830381865afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf9190612c88565b836000815181106109e2576109e2612bfb565b60200260200101846001815181106109fc576109fc612bfb565b6020908102919091010191909152525b610a178785876116dc565b9450610a24878587611b70565b604051630693132f60e51b815260048101869052309063d26265e0906024016040805180830381865afa158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a839190612c88565b82600081518110610a9657610a96612bfb565b6020026020010183600181518110610ab057610ab0612bfb565b60209081029190910101919091525260005b6002811015610d0157828181518110610add57610add612bfb565b6020026020010151828281518110610af757610af7612bfb565b60200260200101511115610b6657828181518110610b1757610b17612bfb565b6020026020010151828281518110610b3157610b31612bfb565b6020026020010151610b439190612cc2565b84604001518281518110610b5957610b59612bfb565b6020026020010181815250505b84602001518181518110610b7c57610b7c612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190612c6f565b84606001518281518110610c0657610c06612bfb565b602002602001018181525050600084606001518281518110610c2a57610c2a612bfb565b60200260200101511115610cf95784602001518181518110610c4e57610c4e612bfb565b60200260200101516001600160a01b031663a9059cbb3386606001518481518110610c7b57610c7b612bfb565b60200260200101516040518363ffffffff1660e01b8152600401610cb49291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610cd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf79190612c11565b505b600101610ac2565b5060005b885151811015610e3f57600089600001518281518110610d2757610d27612bfb565b6020908102919091010151516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da19190612c6f565b90508015610e35576040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015610e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e339190612c11565b505b5050600101610d05565b508660600151610e9b577f825fed7d042a89fa97aab6a6ac630edc9a6e30ab3028983403f4c49b165a81048360000151846020015185604001518660600151604051610e8e9493929190612d4c565b60405180910390a1610eeb565b82516020840151604080860151606087015160a08c015160808d015193517f6a594af100000000000000000000000000000000000000000000000000000000815261017b96959490600401612da4565b5050505050505050565b60008281527f6891d55ec5f39745a8d2e578beced3b89c2702e96df8aac9e4f965508783ef2f60205260408120610f2c9083612099565b90505b92915050565b6040517fa855840a000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03808416602483015282166044820152309063a855840a90606401600060405180830381600087803b158015610f9e57600080fd5b505af1158015610fb2573d6000803e3d6000fd5b50505050505050565b60005b8251518110156110f65760005b8181101561107c578351805182908110610fe757610fe7612bfb565b6020026020010151600001516001600160a01b03168460000151838151811061101257611012612bfb565b6020026020010151600001516001600160a01b0316036110745760405162461bcd60e51b815260206004820152601660248201527f4475706c696361746520696e70757420746f6b656e7300000000000000000000604482015260640161017b565b600101610fcb565b5060008360000151828151811061109557611095612bfb565b602002602001015160200151116110ee5760405162461bcd60e51b815260206004820152601160248201527f496e70757420616d6f756e742069732030000000000000000000000000000000604482015260640161017b565b600101610fbe565b508060400151516002146111725760405162461bcd60e51b815260206004820152602860248201527f496e76616c6964206f7574707574206c656e6774682c206d757374206265206560448201527f786163746c792032000000000000000000000000000000000000000000000000606482015260840161017b565b8060200151516002146111ed5760405162461bcd60e51b815260206004820152602c60248201527f496e76616c6964207469636b2072616e6765206c656e6774682c206d7573742060448201527f62652065786163746c7920320000000000000000000000000000000000000000606482015260840161017b565b806020015160018151811061120457611204612bfb565b602002602001015160020b816020015160008151811061122657611226612bfb565b602002602001015160020b126101245760405162461bcd60e51b815260206004820152601260248201527f496e76616c6964207469636b2072616e67650000000000000000000000000000604482015260640161017b565b60005b816040015151811015611387577fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa3154604083015180516000926001600160a01b0316918391859081106112d6576112d6612bfb565b60200260200101516040516112eb9190612e0c565b60006040518083038185875af1925050503d8060008114611328576040519150601f19603f3d011682016040523d82523d6000602084013e61132d565b606091505b505090508061137e5760405162461bcd60e51b815260206004820152601360248201527f726f75746572207377617020696e76616c696400000000000000000000000000604482015260640161017b565b50600101611281565b5080515160009067ffffffffffffffff8111156113a6576113a661266c565b6040519080825280602002602001820160405280156113cf578160200160208202803683370190505b509050600082600001515167ffffffffffffffff8111156113f2576113f261266c565b60405190808252806020026020018201604052801561141b578160200160208202803683370190505b50905060005b8351518110156114ba57835180518290811061143f5761143f612bfb565b60200260200101516000015183828151811061145d5761145d612bfb565b6001600160a01b0390921660209283029190910190910152835180518290811061148957611489612bfb565b6020026020010151602001518282815181106114a7576114a7612bfb565b6020908102919091010152600101611421565b507f9aad82eab80e5230385f748130c9d61069cfefaffd6f4137cc0ad62c86ed252b82826040516114ec929190612e3b565b60405180910390a15050600081602001515167ffffffffffffffff8111156115165761151661266c565b60405190808252806020026020018201604052801561153f578160200160208202803683370190505b509050600082602001515167ffffffffffffffff8111156115625761156261266c565b60405190808252806020026020018201604052801561158b578160200160208202803683370190505b50905060005b83602001515181101561169d57836020015181815181106115b4576115b4612bfb565b6020026020010151600001518382815181106115d2576115d2612bfb565b60200260200101906001600160a01b031690816001600160a01b03168152505082818151811061160457611604612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116789190612c6f565b82828151811061168a5761168a612bfb565b6020908102919091010152600101611591565b507fab6ed7963a309572d0d275f1fd5dbee4188c4c37c79dd797674ad5d7be6d4c2482826040516116cf929190612e3b565b60405180910390a1505050565b600082602001516000815181106116f5576116f5612bfb565b60200260200101516001600160a01b031663095ea7b3306001600160a01b0316637f1e9ef66040518163ffffffff1660e01b8152600401602060405180830381865afa158015611749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176d9190612e69565b856040015160008151811061178457611784612bfb565b60200260200101516040518363ffffffff1660e01b81526004016117bd9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156117dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118009190612c11565b50826020015160018151811061181857611818612bfb565b60200260200101516001600160a01b031663095ea7b3306001600160a01b0316637f1e9ef66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561186c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118909190612e69565b85604001516001815181106118a7576118a7612bfb565b60200260200101516040518363ffffffff1660e01b81526004016118e09291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156118ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119239190612c11565b5081600003611aa757306001600160a01b0316631587d2b58560000151866020015160008151811061195757611957612bfb565b6020026020010151876020015160018151811061197657611976612bfb565b6020026020010151876040015160008151811061199557611995612bfb565b602002602001015188604001516001815181106119b4576119b4612bfb565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b039095166004860152600293840b60248601529190920b6044840152606483019190915260848201523360a482015260c4016020604051808303816000875af1158015611a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a679190612c6f565b91507fa4e8e12e12124dbefe84fada6e584fcfaf4862f3b8284a8174f89be901ec4d7d82604051611a9a91815260200190565b60405180910390a1611b69565b306001600160a01b031663e115bc5c838560400151600081518110611ace57611ace612bfb565b60200260200101518660400151600181518110611aed57611aed612bfb565b60200260200101516040518463ffffffff1660e01b8152600401611b24939291909283526020830191909152604082015260600190565b6020604051808303816000875af1158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b679190612e86565b505b5092915050565b826060015115611b9157611b8483836120bb565b1515608085015260a08401525b60a083015115611c3157825160a084015160808501516040517fe25d44d10000000000000000000000000000000000000000000000000000000081526001600160a01b03909316600484015260248301919091526000604483015215156064820152309063e25d44d190608401600060405180830381600087803b158015611c1857600080fd5b505af1158015611c2c573d6000803e3d6000fd5b505050505b8160200151600081518110611c4857611c48612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbc9190612c6f565b8360400151600081518110611cd357611cd3612bfb565b6020026020010181815250508160200151600181518110611cf657611cf6612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6a9190612c6f565b8360400151600181518110611d8157611d81612bfb565b6020026020010181815250508160200151600081518110611da457611da4612bfb565b60200260200101516001600160a01b031663095ea7b3306001600160a01b0316637f1e9ef66040518163ffffffff1660e01b8152600401602060405180830381865afa158015611df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1c9190612e69565b8560400151600081518110611e3357611e33612bfb565b60200260200101516040518363ffffffff1660e01b8152600401611e6c9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eaf9190612c11565b508160200151600181518110611ec757611ec7612bfb565b60200260200101516001600160a01b031663095ea7b3306001600160a01b0316637f1e9ef66040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3f9190612e69565b8560400151600181518110611f5657611f56612bfb565b60200260200101516040518363ffffffff1660e01b8152600401611f8f9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd29190612c11565b50306001600160a01b031663e115bc5c828560400151600081518110611ffa57611ffa612bfb565b6020026020010151866040015160018151811061201957612019612bfb565b60200260200101516040518463ffffffff1660e01b8152600401612050939291909283526020830191909152604082015260600190565b6020604051808303816000875af115801561206f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120939190612e86565b50505050565b6001600160a01b03811660009081526001830160205260408120541515610f2c565b60008082602001516001815181106120d5576120d5612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612125573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121499190612c6f565b836020015160008151811061216057612160612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156121b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d49190612c6f565b1190506121fb60405180606001604052806000815260200160008152602001600081525090565b83602001518261220c57600161220f565b60005b60ff168151811061222257612222612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122969190612c6f565b602082015260005b7fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa325481101561265e57602082015182516002916122da91612eb8565b6122e49190612ecb565b60408084018290528751602089015191517f79bf8c2d00000000000000000000000000000000000000000000000000000000815230936379bf8c2d9361233293926000918a91600401612eed565b600060405180830381600087803b15801561234c57600080fd5b505af192505050801561235d575060015b612656573d80801561238b576040519150601f19603f3d011682016040523d82523d6000602084013e612390565b606091505b5060408051600480825260a08201909252828201916000919060208201608080368337019050509050818060200190518101906123cd9190612f68565b846000815181106123e0576123e0612bfb565b60200260200101856001815181106123fa576123fa612bfb565b602002602001018660028151811061241457612414612bfb565b602002602001018760038151811061242e5761242e612bfb565b6020908102919091010193909352929091529190525260008661254157306001600160a01b03166341b34df38360018151811061246d5761246d612bfb565b60200260200101518460008151811061248857612488612bfb565b6020026020010151856003815181106124a3576124a3612bfb565b6020026020010151866002815181106124be576124be612bfb565b60200260200101516040518563ffffffff1660e01b81526004016124fb949392919093845260208401929092526040830152606082015260800190565b602060405180830381865afa158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c9190612c11565b612632565b306001600160a01b03166341b34df38360008151811061256357612563612bfb565b60200260200101518460018151811061257e5761257e612bfb565b60200260200101518560028151811061259957612599612bfb565b6020026020010151866003815181106125b4576125b4612bfb565b60200260200101516040518563ffffffff1660e01b81526004016125f1949392919093845260208401929092526040830152606082015260800190565b602060405180830381865afa15801561260e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126329190612c11565b905080156126465760408601518652612651565b604086015160208701525b505050505b60010161229e565b506040015194909350915050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156126a5576126a561266c565b60405290565b6040516060810167ffffffffffffffff811182821017156126a5576126a561266c565b604051601f8201601f1916810167ffffffffffffffff811182821017156126f7576126f761266c565b604052919050565b600067ffffffffffffffff8211156127195761271961266c565b5060051b60200190565b6001600160a01b03811681146102e157600080fd5b803561274381612723565b919050565b600061275b612756846126ff565b6126ce565b838152905060208101600684901b83018581111561277857600080fd5b835b818110156127e357600060408289031215612793578081fd5b6040805190810167ffffffffffffffff811182821017156127b6576127b661266c565b604052823591506127c682612723565b90815260208281013581830152908452929092019160400161277a565b5050509392505050565b600082601f8301126127fe57600080fd5b610f2c83833560208501612748565b600082601f83011261281e57600080fd5b813561282c612756826126ff565b8082825260208201915060208360051b86010192508583111561284e57600080fd5b602085015b838110156128f257803567ffffffffffffffff81111561287257600080fd5b8601603f8101881361288357600080fd5b602081013567ffffffffffffffff8111156128a0576128a061266c565b6128b3601f8201601f19166020016126ce565b8181526040838301018a10156128c857600080fd5b81604084016020830137600060208383010152808652505050602083019250602081019050612853565b5095945050505050565b600082601f83011261290d57600080fd5b813561291b612756826126ff565b8082825260208201915060208360051b86010192508583111561293d57600080fd5b602085015b838110156128f25780358060020b811461295b57600080fd5b835260209283019201612942565b600082601f83011261297a57600080fd5b8135612988612756826126ff565b8082825260208201915060208360051b8601019250858311156129aa57600080fd5b602085015b838110156128f25780358352602092830192016129af565b80151581146102e157600080fd5b8035612743816129c7565b600060c082840312156129f257600080fd5b6129fa612682565b9050612a0582612738565b8152602082013567ffffffffffffffff811115612a2157600080fd5b612a2d848285016128fc565b602083015250604082013567ffffffffffffffff811115612a4d57600080fd5b612a5984828501612969565b604083015250612a6b606083016129d5565b6060820152612a7c608083016129d5565b608082015260a09182013591810191909152919050565b60008060408385031215612aa657600080fd5b823567ffffffffffffffff811115612abd57600080fd5b830160608186031215612acf57600080fd5b612ad76126ab565b813567ffffffffffffffff811115612aee57600080fd5b8201601f81018713612aff57600080fd5b612b0e87823560208401612748565b825250602082013567ffffffffffffffff811115612b2b57600080fd5b612b37878285016127ed565b602083015250604082013567ffffffffffffffff811115612b5757600080fd5b612b638782850161280d565b604083015250925050602083013567ffffffffffffffff811115612b8657600080fd5b612b92858286016129e0565b9150509250929050565b60006060828403128015612baf57600080fd5b50612bb86126ab565b8235612bc381612723565b8152602083810135908201526040928301359281019290925250919050565b600060208284031215612bf457600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612c2357600080fd5b8151612c2e816129c7565b9392505050565b60008060408385031215612c4857600080fd5b8251612c5381612723565b6020840151909250612c6481612723565b809150509250929050565b600060208284031215612c8157600080fd5b5051919050565b60008060408385031215612c9b57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f2f57610f2f612cac565b600081518084526020840193506020830160005b82811015612d105781516001600160a01b0316865260209586019590910190600101612ce9565b5093949350505050565b600081518084526020840193506020830160005b82811015612d10578151865260209586019590910190600101612d2e565b608081526000612d5f6080830187612cd5565b8281036020840152612d718187612d1a565b90508281036040840152612d858186612d1a565b90508281036060840152612d998185612d1a565b979650505050505050565b60c081526000612db760c0830189612cd5565b8281036020840152612dc98189612d1a565b90508281036040840152612ddd8188612d1a565b90508281036060840152612df18187612d1a565b6080840195909552505090151560a090910152949350505050565b6000825160005b81811015612e2d5760208186018101518583015201612e13565b506000920191825250919050565b604081526000612e4e6040830185612cd5565b8281036020840152612e608185612d1a565b95945050505050565b600060208284031215612e7b57600080fd5b8151612c2e81612723565b600060208284031215612e9857600080fd5b81516fffffffffffffffffffffffffffffffff81168114612c2e57600080fd5b80820180821115610f2f57610f2f612cac565b600082612ee857634e487b7160e01b600052601260045260246000fd5b500490565b600060a082016001600160a01b03881683528660208401526001600160a01b0386166040840152841515606084015260a0608084015280845180835260c08501915060208601925060005b81811015612f5957835160020b835260209384019390920191600101612f38565b50909998505050505050505050565b60008060008060808587031215612f7e57600080fd5b50508251602084015160408501516060909501519196909550909250905056fea2646970667358221220d66e738b12f7bdabf8a21f4bc451369ec69bf61278dc508a63f65cc660aa154f64736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80635d76d687116100505780635d76d687146100db5780639c9774e9146100f0578063fe27824a1461010357600080fd5b80631b86e5f01461006c5780633936c8c4146100a1575b600080fd5b7fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa33546040519081526020015b60405180910390f35b7fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa31546040516001600160a01b039091168152602001610098565b6100ee6100e9366004612a93565b610116565b005b6100ee6100fe366004612b9c565b610128565b6100ee610111366004612be2565b6102d6565b6101248282600160006102e4565b5050565b610133600033610ef5565b6101845760405162461bcd60e51b815260206004820152601360248201527f5265737472696374656420746f2041646d696e0000000000000000000000000060448201526064015b60405180910390fd5b80516001600160a01b03166101db5760405162461bcd60e51b815260206004820152601360248201527f696e6368526f7574657220697320656d70747900000000000000000000000000604482015260640161017b565b806020015160000361022f5760405162461bcd60e51b815260206004820152601c60248201527f62696e536561726368497465726174696f6e7320697320656d70747900000000604482015260640161017b565b80517fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa3180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905560208101517fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa3255604001517fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa3355565b6102e1813333610f35565b50565b6102ee8484610fbb565b60005b8451518110156104c95760008560000151828151811061031357610313612bfb565b602002602001015160000151905083156103ee57806001600160a01b03166323b872dd33308960000151868151811061034e5761034e612bfb565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190612c11565b505b6001600160a01b03811663095ea7b37fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa3154885180516001600160a01b03909216918690811061043f5761043f612bfb565b6020026020010151602001516040518363ffffffff1660e01b815260040161047c9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af115801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf9190612c11565b50506001016102f1565b506104d38461127e565b6040805160026060820181815260c083018452600093839290608084019080368337505050815260408051600280825260608201835260209384019391929091830190803683375050508152604080516002808252606082018352602093840193919290918301908036833750505090526040805160026080820181815260e08301845293945060009391928392919060a08401908036833750505081526040805160028082526060820183526020938401939192909183019080368337505050815260408051600280825260608201835260209384019391929091830190803683375050508152604080516002808252606082018352602093840193919290918301908036833701905050905285516040517fca4f28030000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152909150309063ca4f2803906024016040805180830381865afa158015610643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106679190612c35565b8351805160009061067a5761067a612bfb565b60200260200101846000015160018151811061069857610698612bfb565b6001600160a01b039384166020918202929092010152911690528151815260005b60028110156109175782518051829081106106d6576106d6612bfb565b6020026020010151836020015182815181106106f4576106f4612bfb565b60200260200101906001600160a01b031690816001600160a01b03168152505084801561073e575060008660400151828151811061073457610734612bfb565b6020026020010151115b15610824578260200151818151811061075957610759612bfb565b60200260200101516001600160a01b03166323b872dd33308960400151858151811061078757610787612bfb565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190612c11565b505b8260200151818151811061083a5761083a612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561088a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ae9190612c6f565b836040015182815181106108c4576108c4612bfb565b602002602001018181525050826040015181815181106108e6576108e6612bfb565b60200260200101518660400151828151811061090457610904612bfb565b60209081029190910101526001016106b9565b50604082810151602083015280516002808252606082019092526000918160200160208202803683375050604080516002808252606082018352939450600093909250906020830190803683370190505090508415610a0c57604051630693132f60e51b815260048101869052309063d26265e0906024016040805180830381865afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf9190612c88565b836000815181106109e2576109e2612bfb565b60200260200101846001815181106109fc576109fc612bfb565b6020908102919091010191909152525b610a178785876116dc565b9450610a24878587611b70565b604051630693132f60e51b815260048101869052309063d26265e0906024016040805180830381865afa158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a839190612c88565b82600081518110610a9657610a96612bfb565b6020026020010183600181518110610ab057610ab0612bfb565b60209081029190910101919091525260005b6002811015610d0157828181518110610add57610add612bfb565b6020026020010151828281518110610af757610af7612bfb565b60200260200101511115610b6657828181518110610b1757610b17612bfb565b6020026020010151828281518110610b3157610b31612bfb565b6020026020010151610b439190612cc2565b84604001518281518110610b5957610b59612bfb565b6020026020010181815250505b84602001518181518110610b7c57610b7c612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190612c6f565b84606001518281518110610c0657610c06612bfb565b602002602001018181525050600084606001518281518110610c2a57610c2a612bfb565b60200260200101511115610cf95784602001518181518110610c4e57610c4e612bfb565b60200260200101516001600160a01b031663a9059cbb3386606001518481518110610c7b57610c7b612bfb565b60200260200101516040518363ffffffff1660e01b8152600401610cb49291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610cd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf79190612c11565b505b600101610ac2565b5060005b885151811015610e3f57600089600001518281518110610d2757610d27612bfb565b6020908102919091010151516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da19190612c6f565b90508015610e35576040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015610e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e339190612c11565b505b5050600101610d05565b508660600151610e9b577f825fed7d042a89fa97aab6a6ac630edc9a6e30ab3028983403f4c49b165a81048360000151846020015185604001518660600151604051610e8e9493929190612d4c565b60405180910390a1610eeb565b82516020840151604080860151606087015160a08c015160808d015193517f6a594af100000000000000000000000000000000000000000000000000000000815261017b96959490600401612da4565b5050505050505050565b60008281527f6891d55ec5f39745a8d2e578beced3b89c2702e96df8aac9e4f965508783ef2f60205260408120610f2c9083612099565b90505b92915050565b6040517fa855840a000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03808416602483015282166044820152309063a855840a90606401600060405180830381600087803b158015610f9e57600080fd5b505af1158015610fb2573d6000803e3d6000fd5b50505050505050565b60005b8251518110156110f65760005b8181101561107c578351805182908110610fe757610fe7612bfb565b6020026020010151600001516001600160a01b03168460000151838151811061101257611012612bfb565b6020026020010151600001516001600160a01b0316036110745760405162461bcd60e51b815260206004820152601660248201527f4475706c696361746520696e70757420746f6b656e7300000000000000000000604482015260640161017b565b600101610fcb565b5060008360000151828151811061109557611095612bfb565b602002602001015160200151116110ee5760405162461bcd60e51b815260206004820152601160248201527f496e70757420616d6f756e742069732030000000000000000000000000000000604482015260640161017b565b600101610fbe565b508060400151516002146111725760405162461bcd60e51b815260206004820152602860248201527f496e76616c6964206f7574707574206c656e6774682c206d757374206265206560448201527f786163746c792032000000000000000000000000000000000000000000000000606482015260840161017b565b8060200151516002146111ed5760405162461bcd60e51b815260206004820152602c60248201527f496e76616c6964207469636b2072616e6765206c656e6774682c206d7573742060448201527f62652065786163746c7920320000000000000000000000000000000000000000606482015260840161017b565b806020015160018151811061120457611204612bfb565b602002602001015160020b816020015160008151811061122657611226612bfb565b602002602001015160020b126101245760405162461bcd60e51b815260206004820152601260248201527f496e76616c6964207469636b2072616e67650000000000000000000000000000604482015260640161017b565b60005b816040015151811015611387577fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa3154604083015180516000926001600160a01b0316918391859081106112d6576112d6612bfb565b60200260200101516040516112eb9190612e0c565b60006040518083038185875af1925050503d8060008114611328576040519150601f19603f3d011682016040523d82523d6000602084013e61132d565b606091505b505090508061137e5760405162461bcd60e51b815260206004820152601360248201527f726f75746572207377617020696e76616c696400000000000000000000000000604482015260640161017b565b50600101611281565b5080515160009067ffffffffffffffff8111156113a6576113a661266c565b6040519080825280602002602001820160405280156113cf578160200160208202803683370190505b509050600082600001515167ffffffffffffffff8111156113f2576113f261266c565b60405190808252806020026020018201604052801561141b578160200160208202803683370190505b50905060005b8351518110156114ba57835180518290811061143f5761143f612bfb565b60200260200101516000015183828151811061145d5761145d612bfb565b6001600160a01b0390921660209283029190910190910152835180518290811061148957611489612bfb565b6020026020010151602001518282815181106114a7576114a7612bfb565b6020908102919091010152600101611421565b507f9aad82eab80e5230385f748130c9d61069cfefaffd6f4137cc0ad62c86ed252b82826040516114ec929190612e3b565b60405180910390a15050600081602001515167ffffffffffffffff8111156115165761151661266c565b60405190808252806020026020018201604052801561153f578160200160208202803683370190505b509050600082602001515167ffffffffffffffff8111156115625761156261266c565b60405190808252806020026020018201604052801561158b578160200160208202803683370190505b50905060005b83602001515181101561169d57836020015181815181106115b4576115b4612bfb565b6020026020010151600001518382815181106115d2576115d2612bfb565b60200260200101906001600160a01b031690816001600160a01b03168152505082818151811061160457611604612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116789190612c6f565b82828151811061168a5761168a612bfb565b6020908102919091010152600101611591565b507fab6ed7963a309572d0d275f1fd5dbee4188c4c37c79dd797674ad5d7be6d4c2482826040516116cf929190612e3b565b60405180910390a1505050565b600082602001516000815181106116f5576116f5612bfb565b60200260200101516001600160a01b031663095ea7b3306001600160a01b0316637f1e9ef66040518163ffffffff1660e01b8152600401602060405180830381865afa158015611749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176d9190612e69565b856040015160008151811061178457611784612bfb565b60200260200101516040518363ffffffff1660e01b81526004016117bd9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156117dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118009190612c11565b50826020015160018151811061181857611818612bfb565b60200260200101516001600160a01b031663095ea7b3306001600160a01b0316637f1e9ef66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561186c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118909190612e69565b85604001516001815181106118a7576118a7612bfb565b60200260200101516040518363ffffffff1660e01b81526004016118e09291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156118ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119239190612c11565b5081600003611aa757306001600160a01b0316631587d2b58560000151866020015160008151811061195757611957612bfb565b6020026020010151876020015160018151811061197657611976612bfb565b6020026020010151876040015160008151811061199557611995612bfb565b602002602001015188604001516001815181106119b4576119b4612bfb565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b1681526001600160a01b039095166004860152600293840b60248601529190920b6044840152606483019190915260848201523360a482015260c4016020604051808303816000875af1158015611a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a679190612c6f565b91507fa4e8e12e12124dbefe84fada6e584fcfaf4862f3b8284a8174f89be901ec4d7d82604051611a9a91815260200190565b60405180910390a1611b69565b306001600160a01b031663e115bc5c838560400151600081518110611ace57611ace612bfb565b60200260200101518660400151600181518110611aed57611aed612bfb565b60200260200101516040518463ffffffff1660e01b8152600401611b24939291909283526020830191909152604082015260600190565b6020604051808303816000875af1158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b679190612e86565b505b5092915050565b826060015115611b9157611b8483836120bb565b1515608085015260a08401525b60a083015115611c3157825160a084015160808501516040517fe25d44d10000000000000000000000000000000000000000000000000000000081526001600160a01b03909316600484015260248301919091526000604483015215156064820152309063e25d44d190608401600060405180830381600087803b158015611c1857600080fd5b505af1158015611c2c573d6000803e3d6000fd5b505050505b8160200151600081518110611c4857611c48612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbc9190612c6f565b8360400151600081518110611cd357611cd3612bfb565b6020026020010181815250508160200151600181518110611cf657611cf6612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6a9190612c6f565b8360400151600181518110611d8157611d81612bfb565b6020026020010181815250508160200151600081518110611da457611da4612bfb565b60200260200101516001600160a01b031663095ea7b3306001600160a01b0316637f1e9ef66040518163ffffffff1660e01b8152600401602060405180830381865afa158015611df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1c9190612e69565b8560400151600081518110611e3357611e33612bfb565b60200260200101516040518363ffffffff1660e01b8152600401611e6c9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eaf9190612c11565b508160200151600181518110611ec757611ec7612bfb565b60200260200101516001600160a01b031663095ea7b3306001600160a01b0316637f1e9ef66040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3f9190612e69565b8560400151600181518110611f5657611f56612bfb565b60200260200101516040518363ffffffff1660e01b8152600401611f8f9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015611fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd29190612c11565b50306001600160a01b031663e115bc5c828560400151600081518110611ffa57611ffa612bfb565b6020026020010151866040015160018151811061201957612019612bfb565b60200260200101516040518463ffffffff1660e01b8152600401612050939291909283526020830191909152604082015260600190565b6020604051808303816000875af115801561206f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120939190612e86565b50505050565b6001600160a01b03811660009081526001830160205260408120541515610f2c565b60008082602001516001815181106120d5576120d5612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612125573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121499190612c6f565b836020015160008151811061216057612160612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156121b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d49190612c6f565b1190506121fb60405180606001604052806000815260200160008152602001600081525090565b83602001518261220c57600161220f565b60005b60ff168151811061222257612222612bfb565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122969190612c6f565b602082015260005b7fb441869ad00b07fcfd9d9848d2191e2d089e64bbdfcfc7e94d973ffe9193fa325481101561265e57602082015182516002916122da91612eb8565b6122e49190612ecb565b60408084018290528751602089015191517f79bf8c2d00000000000000000000000000000000000000000000000000000000815230936379bf8c2d9361233293926000918a91600401612eed565b600060405180830381600087803b15801561234c57600080fd5b505af192505050801561235d575060015b612656573d80801561238b576040519150601f19603f3d011682016040523d82523d6000602084013e612390565b606091505b5060408051600480825260a08201909252828201916000919060208201608080368337019050509050818060200190518101906123cd9190612f68565b846000815181106123e0576123e0612bfb565b60200260200101856001815181106123fa576123fa612bfb565b602002602001018660028151811061241457612414612bfb565b602002602001018760038151811061242e5761242e612bfb565b6020908102919091010193909352929091529190525260008661254157306001600160a01b03166341b34df38360018151811061246d5761246d612bfb565b60200260200101518460008151811061248857612488612bfb565b6020026020010151856003815181106124a3576124a3612bfb565b6020026020010151866002815181106124be576124be612bfb565b60200260200101516040518563ffffffff1660e01b81526004016124fb949392919093845260208401929092526040830152606082015260800190565b602060405180830381865afa158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c9190612c11565b612632565b306001600160a01b03166341b34df38360008151811061256357612563612bfb565b60200260200101518460018151811061257e5761257e612bfb565b60200260200101518560028151811061259957612599612bfb565b6020026020010151866003815181106125b4576125b4612bfb565b60200260200101516040518563ffffffff1660e01b81526004016125f1949392919093845260208401929092526040830152606082015260800190565b602060405180830381865afa15801561260e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126329190612c11565b905080156126465760408601518652612651565b604086015160208701525b505050505b60010161229e565b506040015194909350915050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156126a5576126a561266c565b60405290565b6040516060810167ffffffffffffffff811182821017156126a5576126a561266c565b604051601f8201601f1916810167ffffffffffffffff811182821017156126f7576126f761266c565b604052919050565b600067ffffffffffffffff8211156127195761271961266c565b5060051b60200190565b6001600160a01b03811681146102e157600080fd5b803561274381612723565b919050565b600061275b612756846126ff565b6126ce565b838152905060208101600684901b83018581111561277857600080fd5b835b818110156127e357600060408289031215612793578081fd5b6040805190810167ffffffffffffffff811182821017156127b6576127b661266c565b604052823591506127c682612723565b90815260208281013581830152908452929092019160400161277a565b5050509392505050565b600082601f8301126127fe57600080fd5b610f2c83833560208501612748565b600082601f83011261281e57600080fd5b813561282c612756826126ff565b8082825260208201915060208360051b86010192508583111561284e57600080fd5b602085015b838110156128f257803567ffffffffffffffff81111561287257600080fd5b8601603f8101881361288357600080fd5b602081013567ffffffffffffffff8111156128a0576128a061266c565b6128b3601f8201601f19166020016126ce565b8181526040838301018a10156128c857600080fd5b81604084016020830137600060208383010152808652505050602083019250602081019050612853565b5095945050505050565b600082601f83011261290d57600080fd5b813561291b612756826126ff565b8082825260208201915060208360051b86010192508583111561293d57600080fd5b602085015b838110156128f25780358060020b811461295b57600080fd5b835260209283019201612942565b600082601f83011261297a57600080fd5b8135612988612756826126ff565b8082825260208201915060208360051b8601019250858311156129aa57600080fd5b602085015b838110156128f25780358352602092830192016129af565b80151581146102e157600080fd5b8035612743816129c7565b600060c082840312156129f257600080fd5b6129fa612682565b9050612a0582612738565b8152602082013567ffffffffffffffff811115612a2157600080fd5b612a2d848285016128fc565b602083015250604082013567ffffffffffffffff811115612a4d57600080fd5b612a5984828501612969565b604083015250612a6b606083016129d5565b6060820152612a7c608083016129d5565b608082015260a09182013591810191909152919050565b60008060408385031215612aa657600080fd5b823567ffffffffffffffff811115612abd57600080fd5b830160608186031215612acf57600080fd5b612ad76126ab565b813567ffffffffffffffff811115612aee57600080fd5b8201601f81018713612aff57600080fd5b612b0e87823560208401612748565b825250602082013567ffffffffffffffff811115612b2b57600080fd5b612b37878285016127ed565b602083015250604082013567ffffffffffffffff811115612b5757600080fd5b612b638782850161280d565b604083015250925050602083013567ffffffffffffffff811115612b8657600080fd5b612b92858286016129e0565b9150509250929050565b60006060828403128015612baf57600080fd5b50612bb86126ab565b8235612bc381612723565b8152602083810135908201526040928301359281019290925250919050565b600060208284031215612bf457600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612c2357600080fd5b8151612c2e816129c7565b9392505050565b60008060408385031215612c4857600080fd5b8251612c5381612723565b6020840151909250612c6481612723565b809150509250929050565b600060208284031215612c8157600080fd5b5051919050565b60008060408385031215612c9b57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f2f57610f2f612cac565b600081518084526020840193506020830160005b82811015612d105781516001600160a01b0316865260209586019590910190600101612ce9565b5093949350505050565b600081518084526020840193506020830160005b82811015612d10578151865260209586019590910190600101612d2e565b608081526000612d5f6080830187612cd5565b8281036020840152612d718187612d1a565b90508281036040840152612d858186612d1a565b90508281036060840152612d998185612d1a565b979650505050505050565b60c081526000612db760c0830189612cd5565b8281036020840152612dc98189612d1a565b90508281036040840152612ddd8188612d1a565b90508281036060840152612df18187612d1a565b6080840195909552505090151560a090910152949350505050565b6000825160005b81811015612e2d5760208186018101518583015201612e13565b506000920191825250919050565b604081526000612e4e6040830185612cd5565b8281036020840152612e608185612d1a565b95945050505050565b600060208284031215612e7b57600080fd5b8151612c2e81612723565b600060208284031215612e9857600080fd5b81516fffffffffffffffffffffffffffffffff81168114612c2e57600080fd5b80820180821115610f2f57610f2f612cac565b600082612ee857634e487b7160e01b600052601260045260246000fd5b500490565b600060a082016001600160a01b03881683528660208401526001600160a01b0386166040840152841515606084015260a0608084015280845180835260c08501915060208601925060005b81811015612f5957835160020b835260209384019390920191600101612f38565b50909998505050505050505050565b60008060008060808587031215612f7e57600080fd5b50508251602084015160408501516060909501519196909550909250905056fea2646970667358221220d66e738b12f7bdabf8a21f4bc451369ec69bf61278dc508a63f65cc660aa154f64736f6c634300081b0033",
  "devdoc": {
    "errors": {
      "SimulationResult(address[],uint256[],uint256[],uint256[],uint256,bool)": [
        {
          "params": {
            "amountToSwap": "Amount of tokens needed to be swapped secondarily",
            "initialAmounts": "Amounts of tokens after swap",
            "putAmounts": "Amounts of tokens put into the pool",
            "returnedAmounts": "Amounts of tokens returned to the user",
            "swapSide": "Flag indicating if swap token0 to token1 or vice versa",
            "tokens": "Array of pool token addresses"
          }
        }
      ]
    },
    "events": {
      "InputTokens(address[],uint256[])": {
        "params": {
          "amounts": "Array of input token amounts",
          "tokens": "Array of input token addresses"
        }
      },
      "OutputTokens(address[],uint256[])": {
        "params": {
          "amounts": "Array of output token amounts",
          "tokens": "Array of output token addresses"
        }
      },
      "TokenId(uint256)": {
        "params": {
          "tokenId": "The ID of the token"
        }
      },
      "ZapResult(address[],uint256[],uint256[],uint256[])": {
        "params": {
          "initialAmounts": "Amounts of tokens after swap",
          "putAmounts": "Amounts of tokens put into the pool",
          "returnedAmounts": "Amounts of tokens returned to the user",
          "tokens": "Array of pool token addresses"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "zapIn(((address,uint256)[],(address,uint256)[],bytes[]),(address,int24[],uint256[],bool,bool,uint256))": {
        "params": {
          "paramsData": "The parameters for the zap",
          "swapData": "The swap data for the zap"
        }
      },
      "zapOut(uint256)": {
        "params": {
          "tokenId": "The ID of the token to zap out of"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "SimulationResult(address[],uint256[],uint256[],uint256[],uint256,bool)": [
        {
          "notice": "Error thrown with the simulation result of a zap operation"
        }
      ]
    },
    "events": {
      "InputTokens(address[],uint256[])": {
        "notice": "Emitted after swap"
      },
      "OutputTokens(address[],uint256[])": {
        "notice": "Emitted after swap"
      },
      "TokenId(uint256)": {
        "notice": "Emitted when a new token ID is generated"
      },
      "ZapResult(address[],uint256[],uint256[],uint256[])": {
        "notice": "Emitted with the result of a zap operation"
      }
    },
    "kind": "user",
    "methods": {
      "zapIn(((address,uint256)[],(address,uint256)[],bytes[]),(address,int24[],uint256[],bool,bool,uint256))": {
        "notice": "Zaps in to a liquidity position"
      },
      "zapOut(uint256)": {
        "notice": "Zaps out of a liquidity position"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}